<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[心塞！又一次被自己蠢哭]]></title>
      <url>/2017/09/08/%E8%A2%AB%E9%AA%97%E8%AE%B0%E2%80%98/</url>
      <content type="html"><![CDATA[<p><img src="http://oo4xdz5i0.bkt.clouddn.com/perfect.jpg" alt="title"><br><a id="more"></a></p>
<p>很晚了，但是今天就是睡不着，想把今天发生在我身上的事情总结一下，看完之后肯定会觉得我很傻很笨，这一次我将不会再为自己辩解；<br>承认自己被骗是一个很痛苦的事情，不知道谁能体会到；</p>
<p>我发现我真的好笨，这次被骗很难过，并不仅仅是骗了200块钱，而是她还欺骗了我的感情，我那么相信她，跟她聊了好多实话，很多人跟我说过不要太容易去相信别人，我爸妈，还有很多朋友都这么跟我说，我很不愿意接受现实生活中哪有那么多坏人，每次都会反驳一句：你们不要老把别人想得那么坏。。。<br>所以就有了之后的一次又一次被骗，之前碰到乞丐都会给一些钱，还有路边说钱包被偷的没钱吃饭的，借钱回家的，还有1700多买了个酷派合约机，一个月话费120(当时都没工作，那来那么多钱交话费)甚至还有骗你拿自己身份证办银行卡的，很多很多，经历了那么多被骗，以为自己现在成熟很多了，</p>
<p>这次美容院被骗事件，我真的是不知道怎么办，只是问个路，然后那个人就拐着你的胳膊就说我领你去，当时还特庆幸自己遇到一个特别好的人，结果就把我领到店里了，我真的很生气，当时准备扭头就走，可是接下来发生的事就像下面百度到的这些美容院骗术发生的一模一样；</p>
<p><a href="http://jingyan.baidu.com/article/a17d52855420a78098c8f2f9.html" target="_blank" rel="external">http://jingyan.baidu.com/article/a17d52855420a78098c8f2f9.html</a></p>
<p>让脸上抹了一些膏状液体，拿着电疗忆，过一会就变成了黑色(（PS 涂的东西是一种重金属测试膏，百度“美容院用重金属测试膏欺诈顾客”，可以看到相关新闻报道，据说这是十年前就有的骗局。。）)，说是原价700多的现在因为4周年店庆，300多，最后一天，我坚持不做，想走，她死活不让我走，说现在不能走，出去就会感染，过敏，皮囊炎，毁容。。。。(正常人听到这些多少都会还害怕吧，不过现在想想她说怎样就会怎么样么，20多年了，皮肤就这样，很多人一辈子没去去过美容院，也没见自己长着长着毁容的)说你现在不能走，她要对你负责，怎么办，她又说这样吧，给你个学生特惠的190，然后你下次来体验一把全脸的，我意识到这是不掏钱不让走的节奏啊，而且他们人多，我自己，又不敢怎么，但是又不愿相信自己被骗了，还是愿意相信那个人所说的，还傻乎乎的打算有空来体验一把（被自己蠢哭）。</p>
<p>百度完之后，终于意识到自己真的是被骗了，看着百度搜索出来的<a href="http://bbs.tianya.cn/post-funinfo-6488346-1.shtml" target="_blank" rel="external">美容院骗局</a>，<a href="http://jingyan.baidu.com/article/a17d52855420a78098c8f2f9.html" target="_blank" rel="external">解析街边美容院骗局</a>；很多评论都是2017年的。老掉牙的骗局，现在我还被骗，哎，不过看到他们比我骗得钱多，而且很多人都被骗过，心里平衡了很多（明明知道这是一种很不好的心里活动，就当是安慰自己吧）<br><img src="http://oo4xdz5i0.bkt.clouddn.com/jiao.jpeg" alt="title"></p>
<p>真的很希望骗子你们不要再找我了，骗我就是一骗一个准，突然想到，自己能安全活这么大还是很不容易的，所以身边的你们要好好珍惜</p>
<p>很渴望骗子能少一些，人与人之前多一点真诚。这样当真正有需要帮助的人需要帮助的时候，大家才不会那么冷漠。希望那些骗子们不要再玩心理战了，这样真的很可恶，不仅骗钱，还骗感情。</p>
]]></content>
      
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用vue,你知道 keep-alive 么]]></title>
      <url>/2017/09/06/vue%E7%BB%84%E4%BB%B6%E4%B9%8Bkeep-alive/</url>
      <content type="html"><![CDATA[<p><img src="http://oo4xdz5i0.bkt.clouddn.com/keep-alive.jpg" alt="title"><br><a id="more"></a></p>
<p>项目中写vue也没注意到<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>这个组件,最近在深入的研究vue组件的生命周期函数,每一个函数都是干嘛的,然后其中有<code>activated</code>和<code>deactivated</code>这两个函数与<code>&lt;keep-alive&gt;&lt;/keep-alive&gt;</code>这个组件有关</p>
<ul>
<li><code>activated</code>: keep-alive组件激活时调用</li>
<li><code>deactivated</code>: keep-alive组件停用时调用<h3 id="keep-alive用法"><a href="#keep-alive用法" class="headerlink" title="keep-alive用法"></a><a href="https://cn.vuejs.org/v2/api/?#keep-alive" target="_blank" rel="external">keep-alive用法</a></h3></li>
<li><code>&lt;keep-alive&gt;</code>包裹动态组件时,会缓存不活动的组件实例,而不是销毁它们</li>
<li><code>&lt;keep-alive&gt;</code>是一个抽象组件:它自身不会渲染一个DOM元素,也不会出现在父组件链中</li>
<li>当组件在<code>&lt;keep-alive&gt;</code>内被切换,它的<code>activated</code>和<code>deactivated</code>这两个生命周期钩子函数将会被对应执行<h3 id="具体的实例如下"><a href="#具体的实例如下" class="headerlink" title="具体的实例如下"></a>具体的实例如下</h3></li>
<li>是一个简单的tab切换,可以尝试把<code>&lt;keep-alive&gt;</code>去掉之后,对比一下,然后就会发现它的好处</li>
</ul>
<p>test.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test"</span>&gt;</div><div class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"testNav"</span>&gt;</div><div class="line">            &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123;'selected':tab === 1,'testTitle':true&#125;"</span> @click=<span class="string">"toTab(1)"</span>&gt;标题一&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">            &lt;div :class="&#123;'selected':tab === 2,'testTitle':true&#125;"  @click="toTab(2)"&gt;标题二&lt;/</span>div&gt;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">        &lt;div class="container"&gt;</span></div><div class="line"><span class="regexp">            &lt;keep-alive&gt;</span></div><div class="line"><span class="regexp">                &lt;Test1 v-if="tab === 1"&gt;</span></div><div class="line"><span class="regexp">                &lt;/</span>Test1&gt;</div><div class="line">                &lt;Test2 v-<span class="keyword">else</span>&gt;</div><div class="line">                &lt;<span class="regexp">/Test2&gt;</span></div><div class="line"><span class="regexp">            &lt;/</span>keep-alive&gt;</div><div class="line">        &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;/</span>div&gt;</div><div class="line">&lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">    import Test1 from './</span>test1.vue<span class="string">';</span></div><div class="line"><span class="string">    import Test2 from '</span>./test2.vue<span class="string">';</span></div><div class="line"><span class="string">    export default &#123;</span></div><div class="line"><span class="string">        data() &#123;</span></div><div class="line"><span class="string">            return &#123;</span></div><div class="line"><span class="string">                tab: 1,</span></div><div class="line"><span class="string">            &#125;;</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">        components: &#123;</span></div><div class="line"><span class="string">            Test1,</span></div><div class="line"><span class="string">            Test2,</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">        methods: &#123;</span></div><div class="line"><span class="string">            toTab(index) &#123;</span></div><div class="line"><span class="string">                this.tab = index;</span></div><div class="line"><span class="string">            &#125;,</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">&lt;style lang="less"&gt;</span></div><div class="line"><span class="string">.test &#123;</span></div><div class="line"><span class="string">    width: 100%;</span></div><div class="line"><span class="string">    .testNav &#123;</span></div><div class="line"><span class="string">        height: 60px;</span></div><div class="line"><span class="string">        line-height: 60px;</span></div><div class="line"><span class="string">        display: flex;</span></div><div class="line"><span class="string">        border-bottom: 1px solid #e5e5e5;</span></div><div class="line"><span class="string">        .testTitle &#123;</span></div><div class="line"><span class="string">            flex: 1;</span></div><div class="line"><span class="string">            text-align: center;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">        .selected &#123;</span></div><div class="line"><span class="string">            color: red;</span></div><div class="line"><span class="string">        &#125;</span></div><div class="line"><span class="string">    &#125;</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&lt;/style&gt;</span></div></pre></td></tr></table></figure></p>
<p>测试结果如下:<br>注意看一下页面和控制台输出的信息,可以更加直观的注意到<code>&lt;keep-alive&gt;</code>的作用及<code>activated</code>和<code>deactivated</code>这两个函数什么时候会被触发</p>
<ul>
<li>打开页面,会出现下面这样<br><img src="http://oo4xdz5i0.bkt.clouddn.com/keep-alive1.png" alt="1"></li>
</ul>
<p>用setTimeout模拟请求后端接口的场景</p>
<ul>
<li>点击<code>title2</code>,出现下面的情况<br><img src="http://oo4xdz5i0.bkt.clouddn.com/keep-alive2.png" alt="2"></li>
<li>再次点击<code>title1</code>,出现下面的情况,你会发现从后端请求的数据会快速显示出来,但是如果你此时不用<br><img src="http://oo4xdz5i0.bkt.clouddn.com/keep-alive3.png" alt="3"></li>
</ul>
<blockquote>
<p><code>test1.vue</code>和<code>test2.vue</code>的相关代码如下:</p>
</blockquote>
<p>test1.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"test1"</span>&gt;</div><div class="line">      test1</div><div class="line">      &#123;&#123;testInfo1&#125;&#125;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        data() &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                testInfo1: <span class="string">''</span>,</div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        activated() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'测试1被激活'</span>);</div><div class="line">        &#125;,</div><div class="line">        deactivated() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'测试1被缓存'</span>);</div><div class="line">        &#125;,</div><div class="line">        created() &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">this</span>.testInfo1 = <span class="string">'这是测试一的数据'</span>;</div><div class="line">            &#125;, <span class="number">2000</span>);</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>test2.vue<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">      test2</div><div class="line">      &#123;&#123;testInfo2&#125;&#125;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        data() &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                testInfo2: <span class="string">''</span>,</div><div class="line">            &#125;</div><div class="line">        &#125;,  </div><div class="line">        activated() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'测试2被激活'</span>);</div><div class="line">        &#125;,</div><div class="line">        deactivated() &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'测试2被缓存'</span>);</div><div class="line">        &#125;,</div><div class="line">        created() &#123;</div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                <span class="keyword">this</span>.testInfo2 = <span class="string">'这是测试二的数据'</span>;</div><div class="line">            &#125;, <span class="number">2000</span>);</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[flex布局]]></title>
      <url>/2017/09/06/flex%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<p><img src="http://oo4xdz5i0.bkt.clouddn.com/flex.jpg" alt="title"><br><a id="more"></a></p>
<h3 id="使用flex布局"><a href="#使用flex布局" class="headerlink" title="使用flex布局"></a>使用flex布局</h3><p>flex使用方法很简单,只需要将其display属性设置为flex即可,也可以设置行内的flex,记得webkit内核的浏览器,必须加上-webkit,</p>
<ul>
<li>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.ele &#123;</div><div class="line">    display: -webkit-flex;</div><div class="line">    diaplay: flex;</div><div class="line">    display: inline-flex;</div><div class="line">    display: -webkit-inline-flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在flex中,最核心的概念就是容器和轴,其中容器分为父容器和子容器,轴分为主轴和交叉轴(主轴默认为水平方向,方向向右,交叉轴为主轴顺时针旋转90度)</p>
<blockquote>
<h3 id="父容器属性"><a href="#父容器属性" class="headerlink" title="父容器属性"></a>父容器属性</h3><p>父容器有六个属性</p>
<ul>
<li>1,flex-direction: 主轴方向.</li>
<li>2,flex-wrap: 超出父容器子容器的排列方式</li>
<li>3,flex-flow: flex-direction属性和flex-wrap属性的简写方式</li>
<li>4,justify-content: 子容器在主轴的排列方向</li>
<li>5,align-items: 子容器的交叉轴上的排列方式</li>
<li>6,align-content: 多根轴线的对齐方式</li>
</ul>
</blockquote>
<h4 id="flex-direciton属性"><a href="#flex-direciton属性" class="headerlink" title="flex-direciton属性"></a>flex-direciton属性</h4><p>flex-direction属性决定主轴的方向(主轴的方向不一定是水平的,这个属性就是设置主轴的方向,主轴默认是水平方向,从左至右)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">    flex-direction: row;           // 默认值,主轴为水平方向,起点在左端,从左到右</div><div class="line">    flex-direction: row-reverse;   // 主轴为水平方向,起点在右端,从右到左</div><div class="line">    flex-direction: column;        // 主轴为垂直方向,起点在上端,从上到下</div><div class="line">    flex-direction: column;        // 主轴为垂直方向,起点在下端,从下到上</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h4><p>flex-wrap属性决定自容器如果在一条轴线排不下时,如何换行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">    flex-wrap: nowrap;           // 默认,不换行</div><div class="line">    flex-wrap: wrap;       // 换行,第一行在下面</div><div class="line">    flex-wrap: column;     // 换行,第一行在=上面</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<h3 id="子容器也有6个属性"><a href="#子容器也有6个属性" class="headerlink" title="子容器也有6个属性"></a>子容器也有6个属性</h3><ul>
<li>1,order: 子容器的排列顺序</li>
<li>2,flex-grow: 子容器剩余空间的拉伸比例</li>
<li>3,flex-shrink: 子容器超出空间的压缩比例</li>
<li>4,flex-basis: 子容器不伸缩情况下的原始尺寸</li>
<li>5,flex: 子元素的flex属性是flex-grow, flex-shrink, flex-basis的简写</li>
<li>6,align-self: 允许单个子容器与其他字容器不一样的对齐方式,可覆盖父元素aligns-items属性(交叉轴),默认是auto,表示继承父元素的align-items属性,如果没有付元素,则等同于strech</li>
</ul>
</blockquote>
<h4 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h4><p>order属性定义子容器的排列顺序,数值越小,排列越靠前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">item &#123;</div><div class="line">    order: &lt;interger&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h3><p>flex-grow属性定义子容器的放大比例,默认为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">item &#123;</div><div class="line">    flex-grow: &lt;number&gt;; /* default 0 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果子容器的flex-grow属性都为1,则他们将等分剩余空间(如果有的话).如果一个项目的flex-grow属性为2,其他项目都为1,则前者占据的剩余空间将比其他项多一倍;</p>
<h3 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h3><p>flex-shrink定义了子容器的缩小比例,默认为1,如果空间不足,该项目将缩小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">item &#123;</div><div class="line">    flex-shrink: &lt;number&gt;; /* default 1 */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果所有子容器的flex-shrink属性都为1,当空间不足时,都将等比例缩小.如果一个项目的flex-shrink的属性为0,其他项目都为1,则空间不足时,前者不缩小;<br>负值对该属性无效</p>
<h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><p>flex-basis属性定义了在分配多余空间之前,项目占据了主轴空间,浏览器根据这个属性,计算主轴是否有多余空间.它的默认值为auto,即项目的本来大小;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">item &#123;</div><div class="line">    flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它可以设置跟width和height属性一样的值(比如350px),则项目将占据固定空间</p>
<h3 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h3><p>flex是flex-grow,flex-shrink,flex-basis的缩写,默认值为0 1 auto。后两个属性可选<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><p>align-self属性允许单个子容器有与其他子容器不一样的对齐方式，可覆盖align-items属性，默认为auto,表示继承父元素align-items属性，如果没有父元素，则等同于stretch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.item &#123;</div><div class="line">    align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该属性可能取6个值，除了auto,其他都与align-items属性完全一致。</p>
<blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">参考</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一个怎样都不想认输的🌹]]></title>
      <url>/2017/09/06/%E4%B8%8D%E6%83%B3%E5%83%8F%E7%94%9F%E6%B4%BB%E4%BD%8E%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1442902-12ed174df8fe5651?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>毕业两个月,在北京已待了一年多,我成长了很多,无论技术,还是心理…<br><a id="more"></a><br>现在有点开始明白之前为什么一个要晚上十点下班的公司,当时面试技术过了,但是最后却要了一个男生,(最后没被面试上,那个技术面试官还特意打电话说,不是因为你技术不行,而是我们这儿加班很严重,所以综合考虑招了个男同事,让我继续💪);</p>
<p>连续快一个月了,每天晚上一点睡,现在感觉真的身体快吃不消了,昨天上班头疼的已坚持不住,所有跟老大说了一下,晚上八点就早点回去了,电梯里碰到了清洁工阿姨,阿姨会问,吃饭了么,又加班了么,这个点下班真的是太晚了,回去早点休息…(突然想起我妈对我的唠叨)</p>
<p>本来打算晚上回去就睡,躺在床上,突然想起一个解决今天复杂的数据关系的一个思路,于是爬起来打开电脑开始尝试,看了看时间,晚上9点,心里想着最晚11点一定要睡,可是写代码的过程中又遇到很多不会的问题,于是好奇心促使我弄明白我什么…</p>
<p>就这样过了12点…,</p>
<p>一点的时候,实在太困,匆忙把代码传到git上,倒头就睡…<br><img src="http://upload-images.jianshu.io/upload_images/5325674-1a64ccd89f904f17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="title"></p>
<p>闹钟响了,实在挣不开眼,想着再睡十分钟,一会洗漱一定不墨迹;</p>
<p>10分钟搞定,出门的时候看着天气不对,又赶紧找了把伞,看了一个,好,衣服没穿反,放心的找了辆小黄,骑着飞速跑起来,不好,这两车骑得有点费劲,算了,还是赶紧走吧,有辆车就不错了,路上很堵,堵到一路上都被自行车骑着走,但是心理还是很庆幸自己今天没有做公交车;</p>
<p>到了一个红绿灯路口,看到指挥交通的大爷,等红灯的时候大爷很热情的跟我聊天,说今天要下大雨,问我有没有带雨伞,(有一次因为胃疼差点晕倒,这位大爷看到了就扶了我一下,还打算送我去医院,说小姑娘一个人在外面要好好照顾自己,当时眼泪真的就下来了,在帝都这样冷漠的城市,有个陌生人能对你这样,突然感觉很温暖)</p>
<hr>
<p>有时候会想是不是自己老了啊,去年这会刚工作,也是每天很累,因为很多东西要学,记得当时每天晚上看书到两点,周末不加班的时候,也是推了很多’约会’,睡上一上午,然后又开始敲代码…</p>
<p>很累的时候,有时候真的是想放弃,有亲戚跟我打电话,说他们那儿招这种刚毕业的学计算机的,一个月刚开始5000,还给解决住房问题,问我要不要考虑回去,毕竟帝都真的很恐怖;可是我刚毕业技术还有很大的上升空间,还是北京这样的大城市技术发展比较好,更能快速成长,</p>
<p>有时候也会想不如拿着自己的高中教师证回去当老师,或者考个公务员,或者找的对自己好的男的,直接结婚,像很多身边的女朋友一样,然后带孩子…可是那样的生活好像一眼就能望到头,那是我喜欢的生活么?</p>
<p>想起当初自己为什么铁了心的要转行,当时也是能想到以后会遇到很多困难,会很累,找工作的时候,学历就是普通本科,专业又是农业,我只能靠自己过硬的技术来比过自己的竞争者.</p>
<p>我正在为自己想要的生活去奋斗,不想平庸的过一辈子,在外面的时候,不要把自己当成一个女生,因为生活并不会因为你是女生而对你手下留情,所有还是像个汉子一样去努力吧,我相信越努力越幸运</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4968905-11f9b598d609bff1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[清除css默认样式的总结]]></title>
      <url>/2017/09/06/css%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F%E7%9A%84%E6%B8%85%E9%99%A4/</url>
      <content type="html"><![CDATA[<p><img src="http://oo4xdz5i0.bkt.clouddn.com/css.jpg" alt="title"><br><a id="more"></a></p>
<p>我们写css的时候经常会遇到要清楚一些默认的样式,其实每次做项目中需要清除的样式就经常是那么几个,最常见的比如</p>
<ul>
<li>清除表单元素<code>input</code>,<code>select</code>,<code>`textarea</code>的默认样式,</li>
<li>CSS3中隐藏滚动条但仍能继续滚动,</li>
<li>多行文本溢出省略号显示等等,<blockquote>
<p>所以就总结了一下,持续更新中…,也请大家多多贡献更多的常见的需要清除默认样式的方法😊</p>
</blockquote>
</li>
</ul>
<h4 id="1-多行文本溢出省略号显示"><a href="#1-多行文本溢出省略号显示" class="headerlink" title="1,多行文本溢出省略号显示"></a>1,多行文本溢出省略号显示</h4><ul>
<li>让文本只显示一行，然后溢出省略号显示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">overflow: hidden;</div><div class="line">text-overflow: ellipsis;</div><div class="line">white-space: nowrap;</div></pre></td></tr></table></figure>
<ul>
<li>让文本显示两行，然后溢出部分省略号显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">line-height: 1.3rem;</div><div class="line">max-height: 2.6rem;</div><div class="line">display: -webkit-box;</div><div class="line">-webkit-box-orient: vertical;</div><div class="line">-webkit-line-clamp: 2;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2，CSS3中隐藏滚动条但仍能继续滚动"><a href="#2，CSS3中隐藏滚动条但仍能继续滚动" class="headerlink" title="2，CSS3中隐藏滚动条但仍能继续滚动"></a>2，CSS3中隐藏滚动条但仍能继续滚动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">::-webkit-scrollbar &#123;</div><div class="line">    width: 0px;</div><div class="line">    height: 0px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-解决iPhone中overflow-scroll-滑动速度慢或者卡的问题"><a href="#3-解决iPhone中overflow-scroll-滑动速度慢或者卡的问题" class="headerlink" title="3, 解决iPhone中overflow:scroll;滑动速度慢或者卡的问题"></a>3, 解决iPhone中overflow:scroll;滑动速度慢或者卡的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-webkit-overflow-scrolling : touch;</div></pre></td></tr></table></figure>
<h4 id="4-消除input-textarea等的默认样式"><a href="#4-消除input-textarea等的默认样式" class="headerlink" title="4,消除input,textarea等的默认样式"></a>4,消除<code>input</code>,<code>textarea</code>等的默认样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">input, button, select, textarea &#123;</div><div class="line">    outline: none;</div><div class="line">    -webkit-appearance: none;</div><div class="line">    border-radius: <span class="number">0</span>;</div><div class="line">    border:<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">textarea&#123;</div><div class="line">    resize:none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>outline: none;</code>去掉chrome浏览器自带的点击input框出现边框情况</li>
<li><code>-webkit-appearance: button;</code>使元素标签看起来像个按钮样式,意思定义了按钮样式<br><code>-webkit-appearance: none;</code>去掉按钮样式</li>
<li><code>border-radius: 0;</code> 去掉圆角<br><code>border:0;</code> 去掉border</li>
<li><code>textarea{resize:none}</code>取消chrome下textarea可拖动放大：<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="http://wangyaxing.top/">blog</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> css </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结微信小程序开发中遇到的坑]]></title>
      <url>/2017/09/01/wxapp/</url>
      <content type="html"><![CDATA[<p><img src="http://www.kviso.com/softnews/UploadPic/2016-12/2016123111185421229.jpg" alt="title"><br>总结微信小程序开发中遇到的坑,一些坑你得一个一个的跳啊,/(ㄒoㄒ)/~~<br><a id="more"></a></p>
<h3 id="1-页面跳转和参数传递实例"><a href="#1-页面跳转和参数传递实例" class="headerlink" title="1,页面跳转和参数传递实例"></a>1,<a href="http://www.jb51.net/article/103590.htm" target="_blank" rel="external">页面跳转和参数传递实例</a></h3><blockquote>
<p>首先说一下我遇到的需求<br>有一个我的消息页面,里面的数据都是后端返回的,返回的数据大致如下,有一个是数据url是要控制跳转到哪个页面,可能是tab页面也可能是非tab页面,但是微信小程序中跳转到tab和非tab页面用的api不是同一个,但是在页面中渲染肯定是要用到循环的,难道要再多个参数来判断是跳转到tab页面还是非tab页面?</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">    &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="number">2121</span>,</div><div class="line">        <span class="string">"title"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"body"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"url"</span>: <span class="string">"url"</span>,</div><div class="line">        <span class="string">"pic"</span>: <span class="string">"pic"</span>,</div><div class="line">        <span class="string">"created_at"</span>: <span class="string">"2017-07-01 12:34:56"</span></div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="string">"id"</span>: <span class="number">2122</span>,</div><div class="line">        <span class="string">"title"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"body"</span>: <span class="string">"test"</span>,</div><div class="line">        <span class="string">"url"</span>: <span class="string">"url"</span>,</div><div class="line">        <span class="string">"pic"</span>: <span class="string">"pic"</span>,</div><div class="line">        <span class="string">"created_at"</span>: <span class="string">"2017-07-01 12:34:56"</span></div><div class="line">    &#125;,</div><div class="line">]</div></pre></td></tr></table></figure>
<ul>
<li>后一般的小程序中我用的框架是wepy,底部的tab组件就是我自己写的,没有用到小程序自己提供的那一个,因为我们还要实现一个需求,有消息时,底部tab会出现小红点,还有以下弹窗要把底部tab覆盖掉,这些需求如果用小程序提供的那一个tab组件的话根本实现不了;而且不用wepy框架的话,自己做一个tab实现的过程很恶心,小程序虽然实现了组件化,但是它实现的组件化bong不想vue和react那样实现的是真正的组件化,你需要哪个组件就直接import进来,小程序的组件化实现可查看<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/module.html" target="_blank" rel="external">官方文档</a>,js,css和html都是要分别引入的</li>
<li>自己实现的tab页面整体是一个非tab页面,所有整个小程序中就不存在绝对的tab页面,所以用navigator这个组件,想要跳转到tab页面可以通过在url上拼接参数</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"mesList"</span> wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;unReadList&#125;&#125;"</span> wx:key=<span class="string">"unique"</span>&gt;</div><div class="line">    &lt;navigator url=<span class="string">"/pages/index?tab=0"</span> hover-<span class="class"><span class="keyword">class</span></span>=<span class="string">"none"</span> &gt;</div><div class="line">        &lt;text&gt;&#123;&#123;item.body&#125;&#125;&lt;<span class="regexp">/text&gt;</span></div><div class="line"><span class="regexp">        &lt;view class="messageTime"&gt;&#123;&#123;item.created_at&#125;&#125;&lt;/</span>view&gt;</div><div class="line">    &lt;<span class="regexp">/navigator&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>view&gt;</div></pre></td></tr></table></figure>
<p>然后再index页面的onload中判断显示哪个tab<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">onLoad(options) &#123;</div><div class="line">    <span class="keyword">if</span> (options &amp;&amp; options.tab) &#123;</div><div class="line">        <span class="keyword">this</span>.tab = <span class="built_in">parseInt</span>(options.tab);</div><div class="line">        <span class="keyword">this</span>.$apply();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-微信小程序授权处理"><a href="#2-微信小程序授权处理" class="headerlink" title="2,微信小程序授权处理"></a>2,<a href="https://devework.com/weixin-weapp-auth-failed.html" target="_blank" rel="external">微信小程序授权处理</a></h3><ul>
<li>微信小程序提示授权弹窗,如果用户第一次点击拒绝之后,一段时间将不会再次弹出来,然后用户又不知道什么原因用不了小程序,这是个很糟糕的用户体验,我们应该优雅的处理这种情况</li>
<li>采用的解决方法<a href="https://devework.com/weixin-weapp-auth-failed.html" target="_blank" rel="external">参考</a></li>
</ul>
<h3 id="3-登录问题的处理"><a href="#3-登录问题的处理" class="headerlink" title="3, 登录问题的处理"></a>3, 登录问题的处理</h3><ul>
<li>两个登录接口,一个get,判断是否已经还需要登录,如果返回true,则需要登录,如果返回false,则不需要登录</li>
<li>如果返回true,则需要去请求更一个post的登录接口,这时,你需要获取第一个get请求的返回信息中的session,之后每次请求求都需要带上他</li>
<li>在返回true的时候还需要做一件事儿,就是把返回信息中的session存储到storage,即调用setStorage,然后在之后每次请求数据的时候在headers里加上这个字段<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStorage</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="comment">// 先判断本地数据存储有没有cookie</span></div><div class="line">        wx.getStorage(&#123;</div><div class="line">            key: key,</div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                resolve(res.data);</div><div class="line">            &#125;,</div><div class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                resolve(<span class="literal">null</span>);</div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStorage</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        wx.setStorage(&#123;</div><div class="line">            key: key,</div><div class="line">            data: value,</div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                <span class="comment">// <span class="doctag">TODO:</span> 不知道返回什么</span></div><div class="line">                resolve(res.data);</div><div class="line">            &#125;,</div><div class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                reject(res.errMsg);</div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-wx-getStorage安卓手机上返回的错误信息是getStorage-fail-ios-getStorage-fail-data-not-found"><a href="#4-wx-getStorage安卓手机上返回的错误信息是getStorage-fail-ios-getStorage-fail-data-not-found" class="headerlink" title="4,wx.getStorage安卓手机上返回的错误信息是getStorage:fail,ios,getStorage:fail data not found"></a>4,wx.getStorage安卓手机上返回的错误信息是getStorage:fail,ios,getStorage:fail data not found</h3><ul>
<li>在判断一些api返回的错误信息时,最好不要通过判断具体的错误信息来处理错误<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStorage</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        <span class="comment">// 先判断本地数据存储有没有cookie</span></div><div class="line">        wx.getStorage(&#123;</div><div class="line">            key: key,</div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                resolve(res.data);</div><div class="line">            &#125;,</div><div class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                resolve(<span class="literal">null</span>);</div><div class="line">                <span class="comment">// 下面注释的部分即为刚开始犯的错误,导致有可能ios或安卓或部分机型显示不出数据</span></div><div class="line">                <span class="comment">// if (res.errMsg == 'getStorage:fail' || res.errMsg == 'getStorage:fail data not found') &#123;</span></div><div class="line">                <span class="comment">//     console.log('没有cookie');</span></div><div class="line">                <span class="comment">//     resolve(null);</span></div><div class="line">                <span class="comment">// &#125; else &#123;</span></div><div class="line">                <span class="comment">//     console.log('这是一个问题');</span></div><div class="line">                <span class="comment">//     reject(res.errMsg);</span></div><div class="line">                <span class="comment">// &#125;</span></div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-小程序解决异步"><a href="#5-小程序解决异步" class="headerlink" title="5,小程序解决异步"></a>5,小程序解决异步</h3><ul>
<li><p>如果项目中没有用到babal,小程序本身的支持只支持到es6的语法,所以解决异步的问题就不能使用es7的async和await,只能使用promise来解决异步,但是每个api上都进行一次封装(如下),这种做法太恶心了</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">        wx.login(&#123;</div><div class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                resolve(res);</div><div class="line">            &#125;,</div><div class="line">            fail: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">                reject(res.errMsg);</div><div class="line">            &#125;,</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>基于微信的API的prototype上进行了promise的封装</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseify</span>(<span class="params">func</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">args = &#123;&#125;</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">            func.call(wx, <span class="built_in">Object</span>.assign(args, &#123;</div><div class="line">                success: resolve,</div><div class="line">                fail: reject,</div><div class="line">            &#125;));</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> wx) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.hasOwnProperty.call(wx, key) &amp;&amp; <span class="keyword">typeof</span> wx[key] === <span class="string">'function'</span>) &#123;</div><div class="line">        wx[<span class="string">`_<span class="subst">$&#123;key&#125;</span>`</span>] = promiseify(wx[key]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-怎么保证在调用其他接口之前已经调用过登录的接口了"><a href="#6-怎么保证在调用其他接口之前已经调用过登录的接口了" class="headerlink" title="6,怎么保证在调用其他接口之前已经调用过登录的接口了"></a>6,怎么保证在调用其他接口之前已经调用过登录的接口了</h3><ul>
<li>我采用执行队列的方式来解决,问题可以简化为有两个按钮,点击第一个按钮输出这是第几次输出d1,但是必须在点击完d2之后,isPrint变为true时,才允许输出,在isPrint为false的时候点击d1,需要把要输出的内容暂时存储起来,等isPrint变为true时,暂存起来的输出现在才可以输出出来<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// html</span></div><div class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"first"</span>&gt;按钮一&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">  &lt;div class="second"&gt;按钮二&lt;/</span>div&gt;</div><div class="line"><span class="comment">// js</span></div><div class="line">  <span class="keyword">const</span> d1 = <span class="built_in">document</span>.querySelector(<span class="string">'.first'</span>);</div><div class="line">  <span class="keyword">const</span> d2 = <span class="built_in">document</span>.querySelector(<span class="string">'.second'</span>);</div><div class="line">  <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 用来记录第几次输出</span></div><div class="line">  <span class="keyword">let</span> isPrint = <span class="literal">false</span>; <span class="comment">// 是否允许输出</span></div><div class="line">  <span class="keyword">let</span> arr = []; <span class="comment">// 声明一个数组,用来存储</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">clickCount</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    count++;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'这是第'</span> + count + <span class="string">'次输出d1'</span>);</div><div class="line">  &#125;</div><div class="line">  d1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(isPrint);</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    <span class="keyword">if</span> (isPrint) &#123;</div><div class="line">      <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</div><div class="line">        clickCount();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</div><div class="line">          arr[i]();</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      arr.push(clickCount);</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'不允许输出'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">  d2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    isPrint = <span class="literal">true</span>;</div><div class="line">    <span class="built_in">console</span>.log(isPrint);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-小程序问题"><a href="#6-小程序问题" class="headerlink" title="6,小程序问题"></a>6,小程序问题</h3><ul>
<li>不支持跳转外部链接</li>
<li>text可以解析/n,</li>
<li>目前不支持识别图中二维码，</li>
<li>背景图片不能用本地图片，</li>
<li>wx.navigateTo需要跳转的应用内非 tabBar 的页面的路径</li>
<li>wx.switchTab跳转到tabBar页面，</li>
<li>wx.showToast(),icon只支持success和loading,但是支持image,且image优先级高于icon</li>
<li>tabBar页面A   navigatorTo 到页面B，然后B   switchTab 到A，这里A会执行onShow()；<br>但是我再从A跳到B再switchTab回来，A就不会再执行onShow()了，</li>
</ul>
<h3 id="7-总结"><a href="#7-总结" class="headerlink" title="7,总结"></a>7,总结</h3><ul>
<li>有时候在开发者工具上测试时是没有问题的,但是真机测试却有问题,所有开发过程中一定要在多个不同型号的手机上测试;很多时候IOS和安卓api返回的信息不同</li>
<li>在手机上打开调试的时候是好的,但是关闭调试后就会出现各种bug,遇到这种情况一定要一步步的去排查原因</li>
</ul>
<h4 id="8-后采用wepy重构小程序遇到的一些坑"><a href="#8-后采用wepy重构小程序遇到的一些坑" class="headerlink" title="8,后采用wepy重构小程序遇到的一些坑"></a>8,后采用wepy重构小程序遇到的一些坑</h4><p><a href="https://wepyjs.github.io/wepy/#/" target="_blank" rel="external">wepy文档</a><br>1，Q: 怎么在page组件和component组件中回去到getApp(),就是app里面定义的函数,通过this.$parent只能拿到数据，拿不到方法?<br>A:可以在this.$parent的_proto上拿到方法,即this.$parent.onLogin<br>2, Q:怎么实现按需加载<br>A:在compoent组件中自定义生命周期函数,并手动触发</p>
]]></content>
      
        <categories>
            
            <category> 微信小程序 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue生命周期详解]]></title>
      <url>/2017/08/29/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><img src="http://oo4xdz5i0.bkt.clouddn.com/vuelife.jpg" alt="title"><br>vue声明周期,在每个声明周期中都干了些什么?<br><a id="more"></a></p>
<h4 id="1-vue的生命周期"><a href="#1-vue的生命周期" class="headerlink" title="1, vue的生命周期"></a>1, vue的生命周期</h4><ul>
<li>beforeCreate: 组件实例刚刚被创建,组件属性计算之前,如data属性</li>
<li>created: 组件实例创建完成,属性已绑定,但是DOM还未完成,$el属性还不存在</li>
<li>beforeMount:模板编译/挂载之前</li>
<li>mounted: 模板编译/挂载之后</li>
<li>beforeUpdate: 组件更新之前</li>
<li>updated: 组件更新之后</li>
<li>activated: for <code>keep-alive</code>,组件被激活时调用</li>
<li>deactivated: for <code>keep-alive</code>,组件被移除时调用</li>
<li>beforeDestroy: 组件销毁前被调用</li>
<li>destoryed: 组件销毁后调用<blockquote>
<p>ps:下面代码可以直接复制出去执行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</div><div class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>head&gt;</div><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://cdn.jsdelivr.net/vue/2.1.3/vue.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=<span class="string">"app"</span>&gt;&#123;&#123;a&#125;&#125;&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">    &lt;script&gt;</span></div><div class="line"><span class="regexp">        var vm = new Vue(&#123;</span></div><div class="line"><span class="regexp">            el: '#app',</span></div><div class="line"><span class="regexp">            data: &#123;</span></div><div class="line"><span class="regexp">                a: 'vuejs',</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            beforeCreate: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('创建前');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            created: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('创建之后');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            beforeMount: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('mount之前');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            mounted: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('mount之后');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            beforeUpdate: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('更新之前');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            updated: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('更新完成');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            beforeDestroy: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('组件销毁之前');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">            destroyed: function() &#123;</span></div><div class="line"><span class="regexp">                console.log('组件销毁之后');</span></div><div class="line"><span class="regexp">                console.log(this.a);</span></div><div class="line"><span class="regexp">                console.log(this.$el);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">        &#125;)</span></div><div class="line"><span class="regexp">    &lt;/</span>script&gt;</div><div class="line">&lt;<span class="regexp">/body&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>html&gt;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<blockquote>
<p>beforeCreated: el和data并未初始化<br>created: 完成data数据的初始化,el没有<br>beforeMount: 完成了el和data初始化<br>mounted: 完成挂载</p>
</blockquote>
<p><img src="http://oo4xdz5i0.bkt.clouddn.com/vueLife.png" alt="title"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">打开命令行在命令行中输入vm.a = &apos;change&apos;;查看效果</div></pre></td></tr></table></figure></p>
<p><img src="http://oo4xdz5i0.bkt.clouddn.com/vueUpdate.png" alt="title"></p>
<blockquote>
<p><code>activated</code>和<code>deactivated</code>这两个生命周期函数涉及到<code>&lt;keep-alive&gt;</code>这个组件,所以想了解这个生命周期函数的可以看一下我的<a href="http://wangyaxing.top/2017/09/06/vue%E7%BB%84%E4%BB%B6%E4%B9%8Bkeep-alive/#more">另一篇文章</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue组件通信]]></title>
      <url>/2017/08/29/vue%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>组件通信是很重要的一部分,父组件怎么传数据给子组件,子组件怎么传递数据给父组件?<br><a id="more"></a></p>
<h3 id="1-父组件给子组件传递数据"><a href="#1-父组件给子组件传递数据" class="headerlink" title="1,父组件给子组件传递数据"></a>1,父组件给子组件传递数据</h3><blockquote>
<p> vue中使用props向子组件传递数据<br>1): 子组件在props中创建一个属性,用于接收父组件传过来的值<br>2): 父组件中注册子组件<br>3): 在子组件标签中添加子组件props中创建的属性<br>4): 把需要传给子组件的值赋给该属性  </p>
<h3 id="2-子组件向父组件传递数据"><a href="#2-子组件向父组件传递数据" class="headerlink" title="2,子组件向父组件传递数据"></a>2,子组件向父组件传递数据</h3><p>子组件主要通过事件传递数据给父组件<br>1), 子组件中需要以某种方式,例如点击事件的方法来触发一个自定义事件<br>2),将需要传的值作为$emit的第二个参数,该值将作为实参数传给相应自定义事件的方法<br>3),在父组件中注册子组件并在子组件标签上绑定自定义事件的监听</p>
<h3 id="3-子组件向子组件传递数据"><a href="#3-子组件向子组件传递数据" class="headerlink" title="3,子组件向子组件传递数据"></a>3,子组件向子组件传递数据</h3><p>vue找那个没有直接子组件对子组件传参的方法,建议将需要传递数据的在组件,都合并为一个组件,如果一定需要子组件对子组件传参,可以先传到父组件,再传到子组件,为了方便开发,vue推出了一个状态管理工具vuex,可以啃方便的实现组件之间的参数传递</p>
</blockquote>
<p>具体的实例代码如下:可以自行参考相关代码在编辑器中尝试</p>
<ul>
<li><p>父组件向子组件传递数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 父组件向子组件传递数据</span></div><div class="line">&lt;!--</div><div class="line">msg 是在data中(父组件)定义的变量</div><div class="line">如果需要从父组件中获取logo的值,就需要使用props[<span class="string">'msg'</span>], 如<span class="number">30</span>行</div><div class="line">在props中添加了元素以后,就不需要在data中(子组件)中再添加变量了</div><div class="line">--&gt;</div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;child  @transferuser=<span class="string">"getUser"</span> :msg=<span class="string">"msg"</span>&gt;&lt;/child&gt;  </div><div class="line">    &lt;p&gt;用户名为:&#123;&#123;user&#125;&#125;(我是子组件传递给父组件的数据)&lt;<span class="regexp">/p&gt;  </span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;</div><div class="line">&lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">    import child from './</span>child.vue<span class="string">';</span></div><div class="line"><span class="string">    export default &#123;</span></div><div class="line"><span class="string">        components: &#123;</span></div><div class="line"><span class="string">            child,</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">        data() &#123;</span></div><div class="line"><span class="string">            return &#123;</span></div><div class="line"><span class="string">                user: '</span><span class="string">',</span></div><div class="line"><span class="string">                msg: '</span>我是父组件传给子组件的信息<span class="string">',</span></div><div class="line"><span class="string">            &#125;;</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">        methods: &#123;</span></div><div class="line"><span class="string">            getUser(msg) &#123;</span></div><div class="line"><span class="string">                this.user = msg;</span></div><div class="line"><span class="string">                console.log(msg);</span></div><div class="line"><span class="string">            &#125;,</span></div><div class="line"><span class="string">        &#125;,</span></div><div class="line"><span class="string">    &#125;;</span></div><div class="line"><span class="string">&lt;/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>子组件向父组件传递数据</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子组件向父组件传递数据</span></div><div class="line">&lt;!--</div><div class="line"><span class="number">1.</span>@ : 是  v-on的简写</div><div class="line"><span class="number">2.</span>子组件主要通过事件传递数据给父组件</div><div class="line"><span class="number">3.</span>当input的值发生变化时,将username传递给parent.vue,首先声明了一个setUser,用change事件来调用setUser</div><div class="line"><span class="number">4.</span>在setUser中,使用了$emit来遍历transferUser事件,并返回<span class="keyword">this</span>.username,其中transferuser是一个自定义事件,功能类似一个中转,<span class="keyword">this</span>.username通过这个事件传递给父组件</div><div class="line">--&gt;</div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">      &lt;span&gt;用户名&lt;/</span>span&gt;</div><div class="line">      &lt;input v-model=<span class="string">"username"</span> @change=<span class="string">'setUser'</span>&gt;向父组件传值&lt;<span class="regexp">/button&gt;</span></div><div class="line"><span class="regexp">  &lt;/</span>div&gt;</div><div class="line">&lt;<span class="regexp">/template&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;script&gt;</span></div><div class="line"><span class="regexp">    export default &#123;</span></div><div class="line"><span class="regexp">        data() &#123;</span></div><div class="line"><span class="regexp">            return &#123;</span></div><div class="line"><span class="regexp">                username: '测试',</span></div><div class="line"><span class="regexp">            &#125;;</span></div><div class="line"><span class="regexp">        &#125;,</span></div><div class="line"><span class="regexp">        props: &#123;</span></div><div class="line"><span class="regexp">            msg: &#123;</span></div><div class="line"><span class="regexp">                type: String,</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">        &#125;,</span></div><div class="line"><span class="regexp">        methods: &#123;</span></div><div class="line"><span class="regexp">            setUser() &#123;</span></div><div class="line"><span class="regexp">                this.$emit('transferuser', this.username);</span></div><div class="line"><span class="regexp">            &#125;,</span></div><div class="line"><span class="regexp">        &#125;,</span></div><div class="line"><span class="regexp">    &#125;;</span></div><div class="line"><span class="regexp">&lt;/</span>script&gt;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js的函数节流]]></title>
      <url>/2017/08/27/js%E7%9A%84%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1096130-fe7e33473c926bcc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>什么是函数节流?为什么要用到函数节流?函数节流可以解决哪写问题?<br><a id="more"></a></p>
<blockquote>
<p><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">函数节流</a></p>
</blockquote>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景:"></a>使用场景:</h4><ul>
<li>(1)对于常见的场景，如网页滚动时，经常会有滚动到哪时做什么样的动画效果，遂要注册onscroll事件，如何减少触发次数，到达优化性能，同时又满足效果要求不卡顿，一个是优化事件内代码，减少代码量，二就是做函数节流。</li>
<li>(2)在前端开发中，有时会为页面绑定resize事件，或者为一个页面元素绑定拖拽事件（其核心就是绑定mousemove），这种事件有一个特点，就是用户不必特地捣乱，他在一个正常的操作中，都有可能在一个短的时间内触发非常多次事件绑定程序。而大家知道，DOM操作时很消耗性能的，这个时候，如果你为这些事件绑定一些操作DOM节点的操作的话，那就会引发大量的计算，在用户看来，页面可能就一时间没有响应，这个页面一下子变卡了变慢了。甚至在IE下，如果你绑定的resize事件进行较多DOM操作，其高频率可能直接就使得浏览器崩溃。<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4></li>
<li>定时器，当触发一个事件时，先setTimeout让这个事件延迟一会再执行，如果在这个时间间隔内又触发了事件，那我们就clear掉原来的定时器，再setTimeout一个新的定时器延迟一会执行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function throttle(method, context) &#123;</div><div class="line">    clearTimeout(method, tId);</div><div class="line">    method.tId = setTimeout(function()&#123;</div><div class="line">        method.call(context);</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">window.onresize = function() &#123;</div><div class="line">     throttle(myFunc);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var throttle = function(fn, delay) &#123;</div><div class="line">    var timer = null;</div><div class="line">    return function() &#123;</div><div class="line">        var context = this, args = arguments;</div><div class="line">        clearTimeout(timer);</div><div class="line">        timer = setTimeout(function() &#123;</div><div class="line">            fn.apply(context, args);</div><div class="line">        &#125;, delay);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">window.onresize = throttle(myFunc, 100);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var throttleV2 = function (fn, delay, mustRunDelay) &#123;</div><div class="line">    var timer = null;</div><div class="line">    var t_start;</div><div class="line">    return function() &#123;</div><div class="line">        var context = this, args = arguments, t_curr = +new Date();</div><div class="line">        clearTimeout(timer);</div><div class="line">        if(!t_start) &#123;</div><div class="line">            t_start = t_curr;</div><div class="line">        &#125;</div><div class="line">        if(t_curr - t_start &gt;= mustRunDelay) &#123;</div><div class="line">            fn.apply(context, args);</div><div class="line">        &#125; else &#123;</div><div class="line">            timer = setTimeout(function() &#123;</div><div class="line">                fn.apply(context, args);</div><div class="line">            &#125;, delay);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">window.onresize = throttleV2(myFunc, 50, 100);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js垃圾回收机制]]></title>
      <url>/2017/08/27/js%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/4369238-b38891061c7cd794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540/q/50" alt="title"><br>你了解javascript的垃圾回收机制么?<br><a id="more"></a></p>
<ul>
<li>引用计数<br>此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。</li>
</ul>
<p>限制：无法处理循环引用。在下面的例子中，两个对象被创建，并互相引用，形成了一个循环。它们被调用之后不会离开函数作用域，所以它们已经没有用了，可以被回收了。然而，引用计数算法考虑到它们互相都有至少一次引用，所以它们不会被回收。</p>
<ul>
<li>标记清除<br>当变量进入环境时，例如，在函数中声明一个变量，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</li>
</ul>
<p>垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[嘿,使用vue,你注意到了这些了么?]]></title>
      <url>/2017/08/23/vue%E4%B8%AD%E6%A3%80%E6%B5%8B%E4%B8%8D%E5%88%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8F%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>使用vue过程中,遇到了一些问题,这里先总结以下两个:<br><a id="more"></a></p>
<h1 id="问题一"><a href="#问题一" class="headerlink" title="问题一:"></a>问题一:</h1><p>vue组件之间传递数据,在子组件中我想改变一个从父组件中传过来的值</p>
<blockquote>
<p>这是父组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">      &lt;Child :message=<span class="string">"message"</span>&gt;&lt;/Child&gt;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./child.vue'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            message: <span class="string">'这是传给子组件的信息'</span>,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    components: &#123;</div><div class="line">        Child,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是子组件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div @click=<span class="string">"handleChange"</span>&gt;</div><div class="line">      &#123;&#123;message&#125;&#125;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        props: &#123;</div><div class="line">            message: &#123;</div><div class="line">                type: <span class="built_in">String</span>,</div><div class="line">                <span class="keyword">default</span>: <span class="string">'这是默认信息'</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            handleChange() &#123;</div><div class="line">                <span class="keyword">this</span>.message = <span class="string">'我是子组件修改后的信息'</span>;</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>如果你这样写就会报一下错误<br><img src="http://oo4xdz5i0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-24%20%E4%B8%8B%E5%8D%883.12.16.png" alt="title"><br>但是在子组件中，我们不要去修改 prop。如果你必须要修改到这些数据，你可以使用以下方法：</p>
<ul>
<li>把 prop 赋值给一个局部变量，然后需要修改的话就修改这个局部变量，而不影响 prop<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div @click=<span class="string">"handleChange"</span>&gt;</div><div class="line">      &#123;&#123;newMessage&#125;&#125;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">        props: &#123;</div><div class="line">            message: &#123;</div><div class="line">                type: <span class="built_in">String</span>,</div><div class="line">                <span class="keyword">default</span>: <span class="string">'这是默认信息'</span>,</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">        data() &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                newMessage: <span class="keyword">this</span>.message,</div><div class="line">            &#125;;</div><div class="line">        &#125;,</div><div class="line">        methods: &#123;</div><div class="line">            handleChange() &#123;</div><div class="line">                <span class="keyword">this</span>.newMessage = <span class="string">'我是子组件修改后的信息'</span>;</div><div class="line">            &#125;,</div><div class="line">        &#125;,</div><div class="line">    &#125;;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="问题二"><a href="#问题二" class="headerlink" title="问题二:"></a>问题二:</h1><p>vue中检测不到data的变化,我想把给data中的a赋值一个新的对象(添加一个它本身不存在的属性),然而经过尝试发现直接赋值是行不通的,以下是我做的一下尝试<br><!--more--><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">      &#123;&#123;a&#125;&#125;</div><div class="line">  &lt;<span class="regexp">/div&gt;</span></div><div class="line"><span class="regexp">&lt;/</span>template&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> data() &#123;</div><div class="line">     <span class="keyword">return</span> &#123;</div><div class="line">         a: &#123;&#125;,</div><div class="line">     &#125;;</div><div class="line"> &#125;,</div><div class="line"> created() &#123;</div><div class="line">     setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">         <span class="keyword">this</span>.a.b = <span class="number">1</span>;</div><div class="line">     &#125;, <span class="number">1000</span>)</div><div class="line"> &#125;,</div><div class="line"> watch: &#123;</div><div class="line">    a(newVal, oldVal) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;oldVal&#125;</span>现在变成了<span class="subst">$&#123;newVal&#125;</span>`</span>);</div><div class="line">    &#125;,</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>上面这样写(给对象a添加一个本来不存在的属性b,并给他赋值)并不会触发watch,<br><img src="http://oo4xdz5i0.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-08-24%20%E4%B8%8B%E5%8D%882.33.48.png" alt="title"></li>
<li><a href="https://cn.vuejs.org/v2/guide/reactivity.html#变化检测问题" target="_blank" rel="external">vue文档中</a>也明确表示添加到对象上的新属性不会触发更新,所以我们应该新建一个新的对象并将这个心对象的值赋值给原有的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data() &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            a: &#123;&#125;,</div><div class="line">        &#125;;</div><div class="line">    &#125;,</div><div class="line">    created() &#123;</div><div class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.a = &#123;</div><div class="line">                b: <span class="number">1</span>,</div><div class="line">            &#125;;</div><div class="line">        &#125;, <span class="number">500</span>);</div><div class="line">    &#125;,</div><div class="line">    watch: &#123;</div><div class="line">        a(newVal, oldVal) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;oldVal&#125;</span>现在变成了<span class="subst">$&#123;newVal&#125;</span>`</span>);</div><div class="line">        &#125;,</div><div class="line">    &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="由此给大家拓展一个对象的一些知识"><a href="#由此给大家拓展一个对象的一些知识" class="headerlink" title="由此给大家拓展一个对象的一些知识"></a>由此给大家拓展一个对象的一些知识</h2><h3 id="tips1-js取值的两种方式的区别"><a href="#tips1-js取值的两种方式的区别" class="headerlink" title="tips1: js取值的两种方式的区别"></a>tips1: js取值的两种方式的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">abc</span>:<span class="string">"ss"</span>,<span class="attr">nn</span>:<span class="number">90</span>&#125;;</div><div class="line"><span class="keyword">const</span> v1 = obj.abc; <span class="comment">// 使用点的方式</span></div><div class="line"><span class="keyword">const</span> v2 = obj[<span class="string">"abc"</span>]; <span class="comment">// 使用中括号的方式</span></div></pre></td></tr></table></figure>
<p>在实际项目中一般使用.会方便很多,但是key是变量的话就不能使用.,js对象会理解变量为对象的key值,</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> v3 = obj[key];</div></pre></td></tr></table></figure>
<h3 id="tips2-对象深拷贝实现方法"><a href="#tips2-对象深拷贝实现方法" class="headerlink" title="tips2: 对象深拷贝实现方法"></a>tips2: 对象深拷贝实现方法</h3><blockquote>
<p> 先解释什么是深拷贝和浅拷贝</p>
</blockquote>
<ul>
<li>浅拷贝是对对象地址的复制,并没有开辟新的栈,复制的结果是两个对象指向同一个地址,修改其中一个对象的属性,另一个对象的属性也会改变</li>
<li>深拷贝是开辟新的栈,两个对象对应两个不同的地址,修改一个对象的属性,不会改变另一个对象的属性<blockquote>
<p>最简单的如下(方法一)</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(a) )</div></pre></td></tr></table></figure>
<p>但是会存在一些问题</p>
<ul>
<li>无法复制函数</li>
<li>原型链没了，对象就是object，所属的类没了。<blockquote>
<p>使用递归(方法二)</p>
</blockquote>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj1 = &#123;</div><div class="line">    name: <span class="string">'cehsi'</span>,</div><div class="line">    age: <span class="number">13</span>,</div><div class="line">    friends:[<span class="string">'sk'</span>,<span class="string">'ls'</span>],</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">o, c</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> c = c || &#123;&#125;;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> i <span class="keyword">in</span> o) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> o[i] === <span class="string">'object'</span>) &#123;</div><div class="line">            <span class="comment">// 判断是对象</span></div><div class="line">            <span class="keyword">if</span>(o[i].constructor === <span class="built_in">Array</span>) &#123;</div><div class="line">                <span class="comment">// 数组</span></div><div class="line">                c[i] = [];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                c[i] = &#123;&#125;;</div><div class="line">            &#125;</div><div class="line">            deepCopy(o[i], c[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            c[i] = o[i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'result'</span>&#125;;</div><div class="line">obj2 = deepCopy(obj1, obj2);</div><div class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">// &#123; name: 'cehsi', age: 13, friends: [ 'sk', 'ls' ] &#125;</span></div><div class="line">obj2.age = <span class="number">20</span>;</div><div class="line"><span class="built_in">console</span>.log(obj2, obj1); <span class="comment">// &#123; name: 'cehsi', age: 20, friends: [ 'sk', 'ls' ] &#125; &#123; name: 'cehsi', age: 13, friends: [ 'sk', 'ls' ] &#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.npmjs.com/package/deepcopy" target="_blank" rel="external">使用npm install deepcopy</a></p>
</blockquote>
<h3 id="tips3-深对比-方法参考-http-stackoverflow-com-questions-1068834-object-comparison-in-javascript"><a href="#tips3-深对比-方法参考-http-stackoverflow-com-questions-1068834-object-comparison-in-javascript" class="headerlink" title="tips3: 深对比,方法参考 http://stackoverflow.com/questions/1068834/object-comparison-in-javascript"></a>tips3: 深对比,方法参考 <a href="http://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="external">http://stackoverflow.com/questions/1068834/object-comparison-in-javascript</a></h3><blockquote>
<p>方法一:Object.toJSON()</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这个方法简单,但是只适用于两个对象属性相同的情况,在没有方法和DOM节点的情况下，您可以使用简单的JSON样式对象：</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj1 = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> obj2 = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> obj3 = &#123;</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1) === <span class="built_in">JSON</span>.stringify(obj2)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(obj1) === <span class="built_in">JSON</span>.stringify(obj3)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<blockquote>
<p>方法二: 深度比较两个对象</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">比较对象而不挖掘原型，然后递归地比较属性的投影，还可以比较构造函数。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCompare</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i, l, leftChain, rightChain;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compare2Objects</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> p;</div><div class="line"></div><div class="line">        <span class="comment">// remember that NaN === NaN returns false</span></div><div class="line">        <span class="comment">// and isNaN(undefined) returns true</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x) &amp;&amp; <span class="built_in">isNaN</span>(y) &amp;&amp; <span class="keyword">typeof</span> x === <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">'number'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Compare primitives and functions.     </span></div><div class="line">        <span class="comment">// Check if both arguments link to the same object.</span></div><div class="line">        <span class="comment">// Especially useful on the step where we compare prototypes</span></div><div class="line">        <span class="keyword">if</span> (x === y) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Works in case when functions are created in constructor.</span></div><div class="line">        <span class="comment">// Comparing dates is a common scenario. Another built-ins?</span></div><div class="line">        <span class="comment">// We can even handle functions passed across iframes</span></div><div class="line">        <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> y === <span class="string">'function'</span>) ||</div><div class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">Date</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Date</span>) ||</div><div class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">RegExp</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) ||</div><div class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">String</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">String</span>) ||</div><div class="line">            (x <span class="keyword">instanceof</span> <span class="built_in">Number</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Number</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> x.toString() === y.toString();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// At last checking prototypes as good as we can</span></div><div class="line">        <span class="keyword">if</span> (!(x <span class="keyword">instanceof</span> <span class="built_in">Object</span> &amp;&amp; y <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (x.isPrototypeOf(y) || y.isPrototypeOf(x)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (x.constructor !== y.constructor) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (x.prototype !== y.prototype) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Check for infinitive linking loops</span></div><div class="line">        <span class="keyword">if</span> (leftChain.indexOf(x) &gt; <span class="number">-1</span> || rightChain.indexOf(y) &gt; <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Quick checking of one object being a subset of another.</span></div><div class="line">        <span class="comment">// todo: cache the structure of arguments[0] for performance</span></div><div class="line">        <span class="keyword">for</span> (p <span class="keyword">in</span> y) &#123;</div><div class="line">            <span class="keyword">if</span> (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> y[p] !== <span class="keyword">typeof</span> x[p]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (p <span class="keyword">in</span> x) &#123;</div><div class="line">            <span class="keyword">if</span> (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> y[p] !== <span class="keyword">typeof</span> x[p]) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (<span class="keyword">typeof</span>(x[p])) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'object'</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'function'</span>:</div><div class="line"></div><div class="line">                    leftChain.push(x);</div><div class="line">                    rightChain.push(y);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (!compare2Objects(x[p], y[p])) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    leftChain.pop();</div><div class="line">                    rightChain.pop();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    <span class="keyword">if</span> (x[p] !== y[p]) &#123;</div><div class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt; <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//Die silently? Don't know how to handle such case, please help...</span></div><div class="line">        <span class="comment">// throw "Need two or more arguments to compare";</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</div><div class="line"></div><div class="line">        leftChain = []; <span class="comment">//Todo: this can be cached</span></div><div class="line">        rightChain = [];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!compare2Objects(<span class="built_in">arguments</span>[<span class="number">0</span>], <span class="built_in">arguments</span>[i])) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>已知问题（他们的优先级很低，可能你永远不会注意到）</p>
</li>
<li><p>具有不同原型结构但相同投影的物体</p>
</li>
<li>函数可能具有相同的文本，但是指的是不同的闭包原型</li>
</ul>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[揭开vue神秘面纱]]></title>
      <url>/2017/08/20/%E6%8F%AD%E5%BC%80vue%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>带你一步一步走进vue<br><a id="more"></a></p>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="https://github.com/funnycoderstar/vue-demo" target="_blank" rel="external">源码</a><br><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="https://github.com/funnycoderstar/blog" target="_blank" rel="external">blog</a></p>
<h4 id="实现过程-直接上代码"><a href="#实现过程-直接上代码" class="headerlink" title="实现过程,直接上代码"></a>实现过程,直接上代码</h4><h5 id="1-实现简单的v-model的绑定"><a href="#1-实现简单的v-model的绑定" class="headerlink" title="1,实现简单的v-model的绑定"></a>1,实现简单的v-model的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">v-model</span>=<span class="string">"a"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>可以打开控制台,然后输入vm.查看view到model的绑定;然后改变input的值,再次在控制台输出vm.查看model到view的绑定<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                b: 10000,</span></div><div class="line"><span class="undefined">                a: 1</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            el: <span class="string">'#input'</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></div><div class="line"><span class="undefined">            vm.a++;</span></div><div class="line"><span class="undefined">        &#125;, 1000);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(data.el);</div><div class="line">    <span class="keyword">let</span> model = input.getAttribute(<span class="string">'v-model'</span>);</div><div class="line">    <span class="keyword">if</span>(!data.data) &#123;</div><div class="line">        <span class="built_in">console</span>.warn(<span class="string">`你没有定义data`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(model &amp;&amp; data.data.hasOwnProperty(model))&#123;</div><div class="line">        <span class="comment">// 实现model到view的绑定</span></div><div class="line">        input.value = data.data[model];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[model];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line"></div><div class="line">                input.value = data.data[model] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">// 实现view到model的绑定</span></div><div class="line">        input.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>[model] = input.value;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.warn(<span class="string">`你没有定义<span class="subst">$&#123;model&#125;</span>属性`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>把一个普通 JavaScript 对象传给 Vue 实例的 data<br>选项，Vue 将遍历此对象所有的属性，并使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a> 把这些属性全部转为 getter/setter。</li>
<li>给input添加oninput事件实现view到model的绑定,即在input中输入一个值,vm.a也会跟着发生变化</li>
</ul>
<h5 id="2-实现多个v-model的绑定"><a href="#2-实现多个v-model的绑定" class="headerlink" title="2,实现多个v-model的绑定"></a>2,实现多个v-model的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                a: 0,</span></div><div class="line"><span class="undefined">                b: 100,</span></div><div class="line"><span class="undefined">                c: 2,</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            el: <span class="string">'#form'</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> input) &#123;</div><div class="line">        <span class="keyword">let</span> model = item.getAttribute(<span class="string">'v-model'</span>);</div><div class="line">        item.value = data.data[model];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[model];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">                item.value = data.data[model] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">        item.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>[model] = item.value;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实现原理个实现一个v-model差不多</li>
</ul>
<h5 id="3-实现模板的绑定"><a href="#3-实现模板的绑定" class="headerlink" title="3,实现模板的绑定"></a>3,实现模板的绑定</h5><ul>
<li><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; a  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        &#123;&#123; b &#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                a: 0,</span></div><div class="line"><span class="undefined">                b: 100,</span></div><div class="line"><span class="undefined">                c: 2,</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            el: <span class="string">'#form'</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>用正则匹配到html中的模板字符串,然后将相应的部分替换成变量</p>
</li>
<li>匹配html中多个模板,必须先了解dom的结构<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> input) &#123;</div><div class="line">        <span class="keyword">let</span> model = item.getAttribute(<span class="string">'v-model'</span>);</div><div class="line">        item.value = data.data[model];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[model];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">                item.value = data.data[model] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">        item.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>[model] = item.value;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> pss = <span class="built_in">document</span>.querySelector(data.el).childNodes;</div><div class="line">    <span class="keyword">let</span> ps = [];</div><div class="line">    <span class="keyword">let</span> arr = [];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = value.length; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (value[i].nodeType === <span class="number">1</span>) &#123;</div><div class="line">                getText(value[i].childNodes);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value[i].nodeType === <span class="number">3</span>) &#123;</div><div class="line">                ps.push(value[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    getText(pss);</div><div class="line">    <span class="keyword">const</span> reg = <span class="regexp">/&#123;&#123;(.*)&#125;&#125;/</span>;</div><div class="line">    ps.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (reg.test(i.nodeValue)) &#123;</div><div class="line">            arr.push(i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> arr) &#123;</div><div class="line">        <span class="keyword">let</span> $p = reg.exec(p.nodeValue)[<span class="number">0</span>].slice(<span class="number">2</span>, p.nodeValue.length - <span class="number">2</span>).replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</div><div class="line">        p.nodeValue = data.data[$p];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, $p, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[$p];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">                p.nodeValue = data.data[$p] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错在多次赋值被覆盖的错误,所以思路应该变为找到所有绑定a, b, c的值,然后统一赋值</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="4-实现v-bind-v-on的绑定"><a href="#4-实现v-bind-v-on的绑定" class="headerlink" title="4,实现v-bind,v-on的绑定"></a>4,实现v-bind,v-on的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试v-model的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试&#123;&#123;&#125;&#125;的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        &#123;&#123; a &#125;&#125;&#123;&#123; b &#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试v-bind和v-on的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"src"</span> <span class="attr">v-bind:width</span>=<span class="string">"width1"</span> <span class="attr">:height</span>=<span class="string">"height"</span> <span class="attr">v-on:click</span>=<span class="string">"log"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>打开控制台,点击img,查看v-on的绑定效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.obj = &#123;</span></div><div class="line"><span class="undefined">            a: 0,</span></div><div class="line"><span class="undefined">            b: 100,</span></div><div class="line"><span class="javascript">            c: <span class="string">'这是测试'</span>,</span></div><div class="line"><span class="javascript">            src: <span class="string">"http://cdn.suisuijiang.com/message_1492395396308.png?imageView2/2/w/40/h/40"</span>,</span></div><div class="line"><span class="undefined">            width1: 100,</span></div><div class="line"><span class="undefined">            height: 100,</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">            el: <span class="string">'#form'</span>,</span></div><div class="line"><span class="undefined">            data: obj,</span></div><div class="line"><span class="undefined">            methods: &#123;</span></div><div class="line"><span class="javascript">                log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'你点击了图片'</span>);</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">`当前c的值为 <span class="subst">$&#123;<span class="keyword">this</span>.c&#125;</span>`</span>);</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<pre><code class="js"><span class="comment">/**</span>
<span class="comment"> * 解析dom指令</span>
<span class="comment"> * @param {*} $dom 根节点</span>
<span class="comment"> * @param {*} instructs 解析结果</span>
<span class="comment"> */</span>
<span class="function"><span class="keyword">function</span> <span class="title">handleInstruct</span>(<span class="params">$dom, instructs = {}</span>) </span>{
    <span class="function"><span class="keyword">function</span> <span class="title">addInstruct</span>(<span class="params">model, type, $node</span>) </span>{
        <span class="keyword">if</span> (instructs[model]) {
            <span class="keyword">if</span> (instructs[model][type]) {
                instructs[model][type].push($node);
            } <span class="keyword">else</span> {
                instructs[model][type] = [$node];
            }
        } <span class="keyword">else</span> {
            instructs[model] = {
                [type]: [$node]
            };
        }
    }

    <span class="keyword">if</span> ($dom.attributes) {
        <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> $dom.attributes) {
            <span class="keyword">if</span> (attr.name === <span class="string">'v-model'</span>) {
                <span class="keyword">const</span> model = $dom.getAttribute(<span class="string">'v-model'</span>);
                addInstruct(model, <span class="string">'model'</span>, $dom);
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(v-bind|:)/</span>.test(attr.nodeName)) {
                <span class="keyword">const</span> parseResult = attr.nodeName.match(<span class="regexp">/^(?:v-bind)?:([a-zA-Z_$][a-zA-Z0-9_$]*)/</span>);
                <span class="keyword">if</span> (parseResult &amp;&amp; parseResult[<span class="number">1</span>]) {
                    addInstruct(attr.nodeValue.trim(), <span class="string">'bind'</span>, {
                        $dom,
                        attr: parseResult[<span class="number">1</span>]
                    });
                }
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(v-on|@)/</span>.test(attr.name)) {
                <span class="keyword">const</span> parseResult = attr.name.match(<span class="regexp">/^(?:v-on:|@)?([a-zA-Z_$][a-zA-Z0-9_$]*)/</span>);
                <span class="keyword">if</span> (parseResult &amp;&amp; parseResult[<span class="number">1</span>]) {
                    addInstruct(attr.nodeValue.trim(), <span class="string">'on'</span>, {
                        $dom,
                        event: parseResult[<span class="number">1</span>]
                    });
                }
            }
        }
    }

    <span class="keyword">if</span> ($dom.childNodes) {
        <span class="keyword">for</span> (<span class="keyword">const</span> $child <span class="keyword">of</span> $dom.childNodes) {
            <span class="keyword">switch</span> ($child.nodeType) {
                <span class="comment">// ELEMENT_NODE</span>
                <span class="keyword">case</span> <span class="number">1</span>: {
                    handleInstruct($child, instructs);
                    <span class="keyword">break</span>;
                }
                <span class="comment">// TEXT_NODE</span>
                <span class="keyword">case</span> <span class="number">3</span>: {
                    <span class="keyword">const</span> parseResult = $child.data.match(<span class="regexp">/{{[ ]*([a-zA-Z_$][a-zA-Z0-9_$]*)[ ]*}}/g</span>);
                    <span class="keyword">if</span> (parseResult) {
                        parseResult.forEach(<span class="function"><span class="params">x</span> =&gt;</span> {
                            <span class="keyword">const</span> model = x.match(<span class="regexp">/[a-zA-Z_$][a-zA-Z0-9_$]*/</span>);
                            <span class="keyword">if</span> (model) {
                                addInstruct(model, <span class="string">'expression'</span>, {
                                    $dom: $child,
                                    exp: $child.data
                                });
                            }
                        });
                    }
                    <span class="keyword">break</span>;
                }
                <span class="keyword">default</span>:
                    <span class="keyword">break</span>;
            }
        }
    }

    <span class="keyword">return</span> instructs;
}

<span class="function"><span class="keyword">function</span> <span class="title">updateDom</span>(<span class="params">vm, instructs, model, shouldRegisterEvent = false</span>) </span>{
    <span class="comment">// 实现v-model的绑定</span>
    <span class="keyword">if</span> (instructs[model].model) {
        <span class="keyword">for</span> (<span class="keyword">const</span> $el <span class="keyword">of</span> instructs[model].model) {
            $el.value =  vm[model];
            <span class="keyword">if</span> (shouldRegisterEvent) {
                $el.oninput = <span class="function"><span class="params">()</span> =&gt;</span> {
                    <span class="keyword">this</span>[model] = $el.value;
                };
            }
        }
    }
    <span class="comment">// 实现{{}}的绑定</span>
    <span class="keyword">if</span> (instructs[model].expression) {
        <span class="keyword">for</span> (<span class="keyword">let</span> { $dom, exp } <span class="keyword">of</span> instructs[model].expression) {
            <span class="keyword">const</span> parseResult = exp.match(<span class="regexp">/{{[ ]*([a-zA-Z_$][a-zA-Z0-9_$]*)[ ]*}}/g</span>);
            <span class="keyword">if</span> (parseResult) {
                parseResult.forEach(<span class="function"><span class="params">x</span> =&gt;</span> {
                    <span class="keyword">const</span> m = x.match(<span class="regexp">/[a-zA-Z_$][a-zA-Z0-9_$]*/</span>);
                    <span class="keyword">if</span> (m) {
                        exp = exp.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`{{[ ]*${m[0]}[ ]*}}`</span>), vm[m[<span class="number">0</span>]]);
                    }
                });
            }
            $dom.textContent = exp;
        }
    }
    <span class="comment">// 实现v-bind的绑定</span>
    <span class="keyword">if</span> (instructs[model].bind) {
        <span class="keyword">for</span> (<span class="keyword">const</span> {$dom, attr} <span class="keyword">of</span> instructs[model].bind) {
            $dom.setAttribute(attr, vm[model]);
        }
    }
}

<span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">params</span>) </span>{
    <span class="keyword">const</span> $dom = <span class="built_in">document</span>.querySelector(params.el);
    <span class="keyword">if</span> (!$dom) {
        <span class="built_in">console</span>.error(<span class="string">`dom "<span class="subst">${params.el}</span>" not exist`</span>);
        <span class="keyword">return</span>;
    }

    <span class="keyword">const</span> vm = {};
    <span class="keyword">const</span> instructs = handleInstruct($dom);
    <span class="comment">// console.log(instructs);</span>

    <span class="keyword">for</span> (<span class="keyword">const</span> model <span class="keyword">in</span> instructs) {
        <span class="keyword">if</span> (model &amp;&amp; params.data &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(params.data, model)) {
            vm[model] = params.data[model];
            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, {
                get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
                    <span class="keyword">return</span> vm[model];
                },
                set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>{
                    vm[model] = newValue;
                    updateDom(vm, instructs, model);
                }
            });
            updateDom.call(<span class="keyword">this</span>, vm, instructs, model, <span class="literal">true</span>);
        }
        <span class="comment">// 实现v-on的绑定</span>
        <span class="keyword">if</span> (instructs[model].on) {
            <span class="keyword">for</span> (<span class="keyword">const</span> { $dom, event } <span class="keyword">of</span> instructs[model].on) {
                $dom.addEventListener(event, params.methods[model].bind(<span class="keyword">this</span>));
            }
        }
    }
}

<span class="built_in">window</span>.Vue = Vue;
</code></pre>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小记]]></title>
      <url>/2017/08/12/2017-08-11-%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1581250268,3885048217&amp;fm=173&amp;s=0947AB42C3E4BCEC264DC41301008093&amp;w=640&amp;h=401&amp;img.JPEG" alt="title"><br>看到了好多大佬,而且很幸运的中奖了,一个铁三角的耳机~<br><a id="more"></a><br>今天早上起来的时候下着雨,本来以为不会有那么多人了,可是到的时候会议室真的是坐满了人;<br>上午将的都是h5游戏的发展,自从2014年7月22日起，’围住神经猫’这款小游戏在微信朋友圈疯传开来之后,h5小游戏就开始非常火,看来js还是很强大的.</p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> life </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[for in vs for of]]></title>
      <url>/2017/07/03/2017-07-03-for-in-vs-for-of/</url>
      <content type="html"><![CDATA[<p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1652442167,4081781189&amp;fm=173&amp;s=67CAF30748133CC46E9D988C0300F083&amp;w=630&amp;h=379&amp;img.JPEG" alt="title"><br><a id="more"></a></p>
<h3 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for in 和 for of 的区别"></a>for in 和 for of 的区别</h3><ul>
<li><p>for in 更适合遍历对象，不要使用for in 遍历数组</p>
</li>
<li><p>for in 遍历的是数组的索引(即键名)，而for of 遍历的是数组元素值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.methods = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">    c: <span class="number">3</span>,</div><div class="line">&#125;;</div><div class="line">使用<span class="keyword">for</span> <span class="keyword">in</span> 遍历对象的键名</div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</div><div class="line">   <span class="built_in">console</span>.log(key);</div><div class="line"> &#125;</div><div class="line"> a</div><div class="line"> b</div><div class="line"> c</div><div class="line"> methods</div><div class="line"><span class="keyword">for</span> <span class="keyword">in</span> 可以遍历到myObject的原型方法methods，如果不想遍历原型方法和属性的话.可以用hasOwnPropery方法可以判断某属性是否是该对象的实例属性</div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</div><div class="line">     <span class="keyword">if</span>(myObject.hasOwnProperty(key))&#123;</div><div class="line">       <span class="built_in">console</span>.log(key);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> a</div><div class="line"> b</div><div class="line"> c</div><div class="line"></div><div class="line"> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(myObject));  [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</div><div class="line"><span class="built_in">Object</span>.keys(myObject).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key, index</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(key, myObject[key]);</div><div class="line">&#125;)</div><div class="line"> a <span class="number">1</span></div><div class="line"> b <span class="number">2</span></div><div class="line"> c <span class="number">3</span></div><div class="line"> 同样可以通过ES5的<span class="built_in">Object</span>.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性。</div></pre></td></tr></table></figure>
<ul>
<li>for of 用来遍历数组的值</li>
</ul>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中scroll的用法]]></title>
      <url>/2017/06/23/2017-06-23-vue-scroll/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    scrolled: <span class="literal">false</span></div><div class="line">  &#125;;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  handleScroll () &#123;</div><div class="line">    <span class="keyword">this</span>.scrolled = <span class="built_in">window</span>.scrollY &gt; <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">created () &#123;</div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</div><div class="line">&#125;,</div><div class="line">destroyed () &#123;</div><div class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数式编程之尾调用]]></title>
      <url>/2017/06/01/2017-06-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B0%BE%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022201.jpg" alt="title"><br><a id="more"></a></p>
<h2 id="尾调用，就是在函数的最后一步调用另一个函数"><a href="#尾调用，就是在函数的最后一步调用另一个函数" class="headerlink" title="尾调用，就是在函数的最后一步调用另一个函数"></a>尾调用，就是在函数的最后一步调用另一个函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> g(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尾调用不一定出现在函数尾部，只要是最后一步操作就行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> m(x)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数m和n都属于尾调用，他们都是函数的最后一步操作</p>
<h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>函数调用会在内存形成一个’调用记录‘，保存调用位置和内部变量等信息，如果在A函数中调用B函数，在A函数的调用记录上还会形成一个B的调用记录，等到B函数运行结束后，把结果返回到A，B的调用记录才会消失。如果函数B内部还调用C函数，那就是还有一个C的调用记录栈，以此类推，所有的调用记录，就会形成一个’调用栈‘。</p>
<p>尾调用在于它特殊的调用位置。由于是函数最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置和内部变量都不会再用到了。</p>
<p>’尾调用优化‘，只调用内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-redux]]></title>
      <url>/2017/05/24/2017-05-24-react-redux/</url>
      <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016092101.jpg" alt="title"><br><a id="more"></a></p>
<h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>redux的三个概念: action reducer store</p>
<ul>
<li>action: 一个包含type的object, 通常把一个返回action对象的函数称为action函数, 直接简称为action</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        type: <span class="string">'Action1'</span>,</div><div class="line">        data,</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>reducer: 一个根据action type来更新数据的函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123; data: <span class="number">1</span> &#125;, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action1'</span>: &#123;</div><div class="line">            <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</div><div class="line">            <span class="keyword">return</span> newState;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action2'</span>: &#123;</div><div class="line">             <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</div><div class="line">             <span class="keyword">return</span> newState;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>store: 使用createStore从reducer函数创建的数据对象, 包含getState和dispatch方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer);</div><div class="line"><span class="built_in">console</span>.log(store.getState())</div><div class="line"></div><div class="line">store.dispatch(action(<span class="number">0</span>))</div><div class="line"><span class="built_in">console</span>.log(store.getState())</div></pre></td></tr></table></figure>
<p><em>注意! 更新数据需要dispatch对应的action</em></p>
<h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>用于将redux于react结合</p>
<ul>
<li>Provider: 顶层组件, 注入store对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">    &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">        &lt;App /&gt;</div><div class="line">    &lt;<span class="regexp">/Provider&gt;,</span></div><div class="line"><span class="regexp">    document.getElementById('app'),</span></div><div class="line"><span class="regexp">);</span></div></pre></td></tr></table></figure>
<ul>
<li>connect: 工具函数, 参数一为函数, 该函数接收state, 返回一个对象, 对象包含一系列数据. 参数二为函数, 该函数接收dispatch, 返回一个对象, 对象包含一系列方法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">this</span>.props.dispatch(&#123;</div><div class="line">            type: <span class="string">'action1'</span>,</div><div class="line">            data: <span class="number">1</span>,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="comment">// this.props.func1();</span></div><div class="line">        <span class="comment">// this.props.func2();</span></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">            &lt;<span class="regexp">/div &gt;</span></div><div class="line"><span class="regexp">        );</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">export default connect(</span></div><div class="line"><span class="regexp">    state =&gt; (&#123;</span></div><div class="line"><span class="regexp">        data: state.data,</span></div><div class="line"><span class="regexp">        obj: state.obj,</span></div><div class="line"><span class="regexp">    &#125;),</span></div><div class="line"><span class="regexp">    dispatch =&gt; (&#123; dispatch &#125;),</span></div><div class="line"><span class="regexp">)(App);</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h2><p>特殊的object(MAP)/array(LIST)</p>
<ul>
<li>更新数据: set setIn update updateIn</li>
<li>读取数据: get getIn</li>
<li>可以直接比较(深层比较)</li>
<li>创建(fromJS), 还原(toJS)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">上述的reducer可以用下面的代码优化</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = immutable.fromJS(&#123; data: <span class="number">1</span>, obj: &#123; aa: <span class="number">1</span> &#125; &#125;</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action1'</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state.set(<span class="string">'data'</span>, action.data * <span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action2'</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state.setIn([<span class="string">'obj'</span>, <span class="string">'aa'</span>], action.data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>无需深复制, 更新数据自动返回一个新对象</li>
<li>适合与react shouldComponentUpdate结合来优化性能</li>
</ul>
<h2 id="pure-render-decorator"><a href="#pure-render-decorator" class="headerlink" title="pure-render-decorator"></a>pure-render-decorator</h2><p>自动创建shouldComponentUpdate的工具, 需要配置babel decorator特性才能使用</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue全家桶+crawler+koa2 实现阴阳师小助手]]></title>
      <url>/2017/05/20/2017-5-20-vue%E5%85%A8%E5%AE%B6%E6%A1%B6-crawler-koa2-%E5%AE%9E%E7%8E%B0%E9%98%B4%E9%98%B3%E5%B8%88%E5%B0%8F%E5%8A%A9%E6%89%8B/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502713315793&amp;di=f4c278533dc65215060e4dd216b01a20&amp;imgtype=0&amp;src=http%3A%2F%2Fupload.chinaz.com%2F2016%2F0928%2F6361065295044373028726125.png" alt="title"><br>最近一直在玩阴阳师，看了好多小助手，觉得太复杂了，还得登录什么的，想着自己写一个简单的小助手，只要输入要搜索的式神，我想知道的关于这个式神的数据就能显示出来。<br>只是第一版，前端用vue全家桶实现的，很适合刚开始接触vue的，后端用node实现的，如果有更好的建议或者想一起合作写个更好用点的，欢迎联系 <a href="https://github.com/funnycoderstar/yys-fe" target="_blank" rel="external">作者</a>。<br><a id="more"></a></p>
<h1 id="yys-fe-阴阳师小助手前端"><a href="#yys-fe-阴阳师小助手前端" class="headerlink" title="yys-fe(阴阳师小助手前端)"></a>yys-fe(阴阳师小助手前端)</h1><blockquote>
<p>A Vue.js project</p>
</blockquote>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/funnycoderstar/yys-fe" target="_blank" rel="external">github</a></h3><h3 id="项目链接"><a href="#项目链接" class="headerlink" title="项目链接"></a><a href="http://yys.wangyaxing.top/#/" target="_blank" rel="external">项目链接</a></h3><p><img src="http://upload-images.jianshu.io/upload_images/3297464-bcc37825a913c8ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="阴阳师小助手后端实现"><a href="#阴阳师小助手后端实现" class="headerlink" title="阴阳师小助手后端实现"></a><a href="https://github.com/funnycoderstar/yys-be" target="_blank" rel="external">阴阳师小助手后端实现</a></h3><ul>
<li>nodejs + crawler + koa2 + mongoose</li>
</ul>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://upload-images.jianshu.io/upload_images/3297464-7c42da95d346c282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="search.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3297464-3e76f027626a4124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="searchResult.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3297464-c776e7602061a23a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="heroList.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3297464-c266c0669e263d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="heroTab.png"></p>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><pre><code>- 构建工具：webpack；
- 语言：Es6；
- 代码规范：eslint
- 应用：vue，
     vuex（数据管理架构），
     vue-router（路由），
     mint-ui（ul组件），
     vue-axios（vue做的ajax请求）
</code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">|-- [build]                          //构建服务和webpack配置</div><div class="line">|-- [config]                        //项目不同环境的配置</div><div class="line">|-- [dist]                            //文件服务器根目录  </div><div class="line">|-- [node_modules]          //项目依赖</div><div class="line">|-- [src]                             //源码</div><div class="line">|   |-- [assets]                    //资源文件</div><div class="line">|   |-- [components]           //项目模块文件夹</div><div class="line">|   |-- [store]                      //存储数据</div><div class="line">|   |       |-- index.js            //vuex store 定义</div><div class="line">|   |-- App.vue                   //主页面   </div><div class="line">|   |-- main.js                     //webpack预编译入口</div><div class="line">|   |-- [router]                     //全局路由定义</div><div class="line">|-- .babelrc                       //babel配置</div><div class="line">|-- .eslintrc.js                    //eslint rule 定义</div><div class="line">|-- index.html                    //项目入口文件</div><div class="line">|-- package.json               //项目配置文件</div><div class="line">|-- README.md               //关于启动项目的命令和含义</div></pre></td></tr></table></figure>
<h2 id="已经完成的模块"><a href="#已经完成的模块" class="headerlink" title="已经完成的模块"></a>已经完成的模块</h2><ul>
<li style="list-style: none"><input type="checkbox" checked> 式神搜索页面(支持模糊搜索)</li>
<li style="list-style: none"><input type="checkbox" checked> 式神搜索结果页面</li>
<li style="list-style: none"><input type="checkbox" checked> 式神列表页面</li>
<li style="list-style: none"><input type="checkbox" checked> 式神详细信息页面</li>
<li>[X] 推荐御魂</li>
<li>[X] 推荐搭配</li>
<li>[X] 式神点评</li>
</ul>
<h2 id="待完成与优化"><a href="#待完成与优化" class="headerlink" title="待完成与优化"></a>待完成与优化</h2><ul>
<li style="list-style: none"><input type="checkbox"> 搜索功能添加历史搜索和热门搜索</li>
<li style="list-style: none"><input type="checkbox"> 式神攻略</li>
<li style="list-style: none"><input type="checkbox"> 式神视频</li>
<li style="list-style: none"><input type="checkbox"> 页面样式的优化</li>
</ul>
<h2 id="Build-Setup"><a href="#Build-Setup" class="headerlink" title="Build Setup"></a>Build Setup</h2><p>``` bash</p>
<h1 id="install-dependencies"><a href="#install-dependencies" class="headerlink" title="install dependencies"></a>install dependencies</h1><p>npm install</p>
<h1 id="serve-with-hot-reload-at-localhost-8080"><a href="#serve-with-hot-reload-at-localhost-8080" class="headerlink" title="serve with hot reload at localhost:8080"></a>serve with hot reload at localhost:8080</h1><p>npm run dev</p>
<h1 id="build-for-production-with-minification"><a href="#build-for-production-with-minification" class="headerlink" title="build for production with minification"></a>build for production with minification</h1><p>npm run build</p>
<p>关于用vue时遇到的坑，记录在我的<a href="https://github.com/funnycoderstar/blog/issues?utf8=%E2%9C%93&amp;q=vue" target="_blank" rel="external">博客</a>,希望可以对大家有用<br>目前小编在学react，所以用<a href="https://github.com/funnycoderstar/yys_v2" target="_blank" rel="external">react也写了一版</a>,所以刚开始接触react的童鞋也可以看一下，想着第二版的ui设计的好看一点儿，功能再多一点儿，期待更多的建议。</p>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="https://github.com/funnycoderstar/blog" target="_blank" rel="external">blog</a></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>/2017/05/03/2017-05-03-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/1240" alt="title"><br>所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。<br><a id="more"></a></p>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ul>
<li>冒泡算法</li>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">//相邻元素两两对比</span></div><div class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">//元素交换</span></div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bubbleSort([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">3</span>]));</div></pre></td></tr></table></figure>
</li>
<li><p>快速排序,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> leftArr = [];</div><div class="line">    <span class="keyword">let</span> rightArr = [];</div><div class="line">    <span class="keyword">let</span> q = arr[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;arr.length;i++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &gt; q) &#123;</div><div class="line">            rightArr.push(arr[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            leftArr.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [].concat(quickSort(leftArr),[q],quickSort(rightArr));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(quickSort([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">3</span>]));</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端拿高薪必看面试题]]></title>
      <url>/2017/05/02/2017-05-02-js%E7%BB%8F%E5%85%B8%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2098593-15e01329776ddf2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>面试之前都会从网上找很多面试题来看,尤其是看到经典面试题,及必会的面试题,都是好好的看上几遍(其实更多的时候都是在背),可是总感觉面试之前看题作用并不大,因为你不理解的问题,还是会不理解,面试管随便一问,就不行了.其实面试几次后就会发现,经常问的问题也就那几个,比如,闭包,原型链,this,等.刚开始的时候真的是理解不了,然后就看书,强烈推荐<code>《javascript高级程序设计(第三版)》</code>以及<code>《你不知道的javascript系列》</code>,在实际项目中遇到坑的时候,就反复看,看的时候很难受,但是当真正理解了之后,就会恍然大悟,所以功夫还是下在平时,临时抱佛脚真的没啥用~</p>
<blockquote>
<p>以下是我总结的面试题中常问到的,很多都是<code>我亲身经历的面试</code>中遇到的一些问题,刚开始遇到的时候也不是太清楚,面试完之后就深入的学习了一下相关的知识😜</p>
</blockquote>
<a id="more"></a>
<h3 id="1-考察this"><a href="#1-考察this" class="headerlink" title="1,考察this"></a>1,考察this</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  length: <span class="number">5</span>,</div><div class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    fn();</div><div class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.method(fn, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>10 ，2</li>
<li>第一次输出10应该没有问题。我们知道取对象属于除了点操作符还可以用中括号，所以第二次执行时相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  length: <span class="number">5</span>,</div><div class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    fn();</div><div class="line">    <span class="keyword">const</span> fun = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">    fun()；</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.method(fn, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>10 10<h3 id="2-var和函数的提前声明"><a href="#2-var和函数的提前声明" class="headerlink" title="2,var和函数的提前声明"></a>2,var和函数的提前声明</h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a); </div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  <span class="built_in">console</span>.log(a); </div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>function a() {} </li>
<li>2</li>
<li>var和function是会提前声明的.而且function是优先于var声明的(如果同时存在的话),所以刚开始输出的就是一个funciton,接着往下执行a进行重新赋值了,故第二次输出的是2；</li>
</ul>
<h3 id="3，局部变量和全局变量"><a href="#3，局部变量和全局变量" class="headerlink" title="3，局部变量和全局变量"></a>3，局部变量和全局变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;</div><div class="line"><span class="keyword">if</span> (f === <span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">  c = <span class="number">30</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn();</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="built_in">console</span>.log(c);</div></pre></td></tr></table></figure>
<ul>
<li>输出 10 报错 30</li>
<li>这是个我犯了很久的错误，很长一段时间我都以为{…}内的新声明的变量是局部变量，后来我才发现function内的新声明的变量才是局部变量，而没有用var声明的变量在哪里都是全局变量。再次提醒切记只有function(){}内新声明的才能是局部变量，while{…}、if{…}、for(..) 之内的都是全局变量（除非本身包含在function内）。</li>
</ul>
<h3 id="4，变量隐式声明"><a href="#4，变量隐式声明" class="headerlink" title="4，变量隐式声明"></a>4，变量隐式声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>( <span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<ul>
<li>10</li>
<li>funciton和var会提前声明,而其实{…}内的变量也会提前声明，于是代码还没执行前a已经被声明了。所以 ‘a’ in window会返回true,a被赋值</li>
</ul>
<h3 id="5，给基本类型数据添加属性，不报错，但取值时是undefined"><a href="#5，给基本类型数据添加属性，不报错，但取值时是undefined" class="headerlink" title="5，给基本类型数据添加属性，不报错，但取值时是undefined"></a>5，给基本类型数据添加属性，不报错，但取值时是undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">a.pro = <span class="number">10</span>;</div><div class="line"><span class="built_in">console</span>.log(a.pro + a);</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</div><div class="line">s.pro = <span class="string">'world'</span>;</div><div class="line"><span class="built_in">console</span>.log(s.pro + s);</div></pre></td></tr></table></figure>
<ul>
<li>NaN undefinedhello</li>
<li>给基本类型数据加属性不报错，但是引用的话返回undefined,10+undefined返回NaN,而undefined和string相加时转变成了字符串</li>
</ul>
<h4 id="6，函数声明优先于变量声明"><a href="#6，函数声明优先于变量声明" class="headerlink" title="6，函数声明优先于变量声明"></a>6，函数声明优先于变量声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> fn;</div></pre></td></tr></table></figure>
<ul>
<li>function</li>
<li>因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。</li>
</ul>
<h4 id="7-判断一个字符串中出现次数最多的字符，并统计次数"><a href="#7-判断一个字符串中出现次数最多的字符，并统计次数" class="headerlink" title="7,判断一个字符串中出现次数最多的字符，并统计次数"></a>7,判断一个字符串中出现次数最多的字符，并统计次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> letter;</div><div class="line"><span class="keyword">var</span> maxn = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; s.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(obj[s[i]]) &#123;</div><div class="line">            obj[s[i]] ++;</div><div class="line">            <span class="keyword">if</span>(obj[s[i]] &gt; maxn) &#123;</div><div class="line">                maxn = obj[s[i]];</div><div class="line">                letter = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            obj[s[i]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(obj[s[i]] &gt; maxn) &#123;</div><div class="line">                maxn = obj[s[i]];</div><div class="line">                letter = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;letter&#125;</span>:<span class="subst">$&#123;maxn&#125;</span>`</span>);</div></pre></td></tr></table></figure>
<ul>
<li>正则<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</div><div class="line"><span class="keyword">var</span> a = s.split(<span class="string">''</span>);</div><div class="line">a.sort();</div><div class="line">s = a.join(<span class="string">''</span>);</div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(\w)\1*/g</span>;</div><div class="line"><span class="keyword">var</span> ans = s.match(pattern);</div><div class="line">ans.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.length &lt; b.length;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(ans[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">':'</span> + ans[<span class="number">0</span>].length);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="8，-经典闭包"><a href="#8，-经典闭包" class="headerlink" title="8， 经典闭包"></a>8， <a href="https://juejin.im/post/58f558efac502e006c3e5c97" target="_blank" rel="external">经典闭包</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;这是第<span class="number">1</span>个&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;这是第2个&lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;这是第<span class="number">3</span>个&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;这是第4个&lt;/</span>li&gt;</div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;!--js--&gt;</span></div><div class="line"><span class="regexp">一：</span></div><div class="line"><span class="regexp">for(var i = 0; i &lt; lis.length; i++) &#123;</span></div><div class="line"><span class="regexp">    lis[i].index = i;</span></div><div class="line"><span class="regexp">    lis[i].onclick = function() &#123;</span></div><div class="line"><span class="regexp">      alert(this.index);</span></div><div class="line"><span class="regexp">    &#125;;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">二:</span></div><div class="line"><span class="regexp">for(var i = 0; i &lt; lis.length; i++) &#123;</span></div><div class="line"><span class="regexp">    (function(i) &#123;</span></div><div class="line"><span class="regexp">      lis[i].onclick = function() &#123;</span></div><div class="line"><span class="regexp">        alert(i);</span></div><div class="line"><span class="regexp">      &#125;;</span></div><div class="line"><span class="regexp">    &#125;)(i); </span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">三：</span></div><div class="line"><span class="regexp">for(let i = 0; i &lt; lis.length; i++) &#123;</span></div><div class="line"><span class="regexp">    lis[i].onclick = function() &#123;</span></div><div class="line"><span class="regexp">    alert(i);</span></div><div class="line"><span class="regexp">    &#125;;</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>从0开始隔10s按顺序出现’第一次出现’,’第二次出现’,’第三次出现‘<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> datas = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>];</div><div class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</div><div class="line">    <span class="comment">//    const index = i;</span></div><div class="line">    <span class="keyword">if</span> (timer) &#123;</div><div class="line">        clearTimeout(timer);</div><div class="line">        <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(datas[i]);</div><div class="line">        &#125;, <span class="number">10000</span> * i)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(datas[i]);</div><div class="line">        &#125;, <span class="number">10000</span> * i)</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="9，请编写一个JavaScript函数-parseQueryString，它的用途是把URL参数解析为一个对象，如：-var-url-“http-witmax-cn-index-php-key0-0-amp-key1-1-amp-key2-2″"><a href="#9，请编写一个JavaScript函数-parseQueryString，它的用途是把URL参数解析为一个对象，如：-var-url-“http-witmax-cn-index-php-key0-0-amp-key1-1-amp-key2-2″" class="headerlink" title="9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″"></a>9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “<a href="http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″" target="_blank" rel="external">http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> a = url.split(<span class="string">'?'</span>);</div><div class="line">  <span class="keyword">if</span>(a.length === <span class="number">1</span>) <span class="keyword">return</span> obj;</div><div class="line">  <span class="keyword">var</span> b = a[<span class="number">1</span>].split(<span class="string">'&amp;'</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, length = b.length; i &lt; length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> c = b[i].split(<span class="string">'='</span>);</div><div class="line">    obj[c[<span class="number">0</span>]] = c[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2'</span>;</div><div class="line"><span class="keyword">var</span> obj = parseQueryString(url);</div><div class="line"><span class="built_in">console</span>.log(obj.key0, obj.key1, obj.key2);  <span class="comment">// 0 1 2</span></div></pre></td></tr></table></figure>
<h4 id="10-this"><a href="#10-this" class="headerlink" title="10,this"></a>10,this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> baz=<span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> bazz=&#123;</div><div class="line">   baz: <span class="number">2</span>,</div><div class="line">   getbaz: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.baz</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bazz.getbaz())</div><div class="line"><span class="keyword">var</span> g=bazz.getbaz;</div><div class="line"><span class="built_in">console</span>.log(g());</div><div class="line">第一个输出<span class="number">2</span>，第二个输出<span class="number">3</span>,函数作为对象本身属性调用的时候<span class="keyword">this</span>指向对象，作为普通函数调用的时候就指向全局了</div></pre></td></tr></table></figure>
<h4 id="11，数组方法"><a href="#11，数组方法" class="headerlink" title="11，数组方法"></a>11，数组方法</h4><ul>
<li>数组排序:写一个js函数,将数组对象按照一定的顺序进行排序，且可通过参数决定升降序</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = [</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"first"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">1</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"second"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">2</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"third"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">3</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"fourth"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">4</span>,</div><div class="line">    &#125;,</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">property</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a[property] - a[property];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(list.sort(compare(<span class="string">'index'</span>)))</div></pre></td></tr></table></figure>
<h4 id="12-求一个字符串的字节长度"><a href="#12-求一个字符串的字节长度" class="headerlink" title="12,求一个字符串的字节长度"></a>12,求一个字符串的字节长度</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> len = str.length;</div><div class="line">        <span class="keyword">var</span> bytes = len;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</div><div class="line">str = <span class="string">'hello world'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">// 104, 返回指定索引处字符的 Unicode 数值,大于255为中文</span></div><div class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">// h, 返回指定位置的字符,</span></div></pre></td></tr></table></figure>
<h4 id="13-jsonp原理及过程"><a href="#13-jsonp原理及过程" class="headerlink" title="13 jsonp原理及过程"></a>13 jsonp原理及过程</h4><ul>
<li>利用<script>标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。</li>
<li>当需要通讯时，本站脚本创建一个<script>元素，地址指向第三方的API网址，形如 <script src="http://www.example.net/api?param1=1&param2=2"></script></li>
<li>并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。</li>
<li>第三方产生的响应为json数据的包装（故称之为jsonp，即json padding），形如：callback({“name”:”hax”,”gender”:”Male”})这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。</li>
</ul>
<h4 id="14-link和-import区别"><a href="#14-link和-import区别" class="headerlink" title="14, link和@import区别"></a>14, link和@import区别</h4><ul>
<li>link属于html标签，而@import是css提供的。</li>
<li>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</li>
<li>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</li>
<li>link方式样式的权重高于@import的</li>
</ul>
<h3 id="15-一个页面从输入url到页面加载显示完成-这个过程都发生了什么"><a href="#15-一个页面从输入url到页面加载显示完成-这个过程都发生了什么" class="headerlink" title="15,一个页面从输入url到页面加载显示完成,这个过程都发生了什么?"></a>15,一个页面从输入url到页面加载显示完成,这个过程都发生了什么?</h3><ul>
<li>1,浏览器开启一个线程来处理这个请求</li>
<li>2,查找浏览器缓存(浏览器缓存-系统缓存-路由器缓存)</li>
<li>3,DNS解析,查找该域名对应的IP地址,重定向(301),</li>
<li>4,向真实IP地址服务器发出tcp连接,tcp三次握手</li>
<li>5,握手成功后,进行http协议会话,浏览器发送报头</li>
<li>6,进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;</li>
<li>7,进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;</li>
<li>8,处理结束回馈报头，将数据返回至浏览器;</li>
<li>9,浏览器开始下载html文档(响应报头，状态码200)，同时设置缓存;</li>
<li>10,之后浏览器对整个 HTML 结构进行解析，形成 DOM 树；与此同时，它还需要对相应的 CSS 文件进行解析，形成 CSS 树（CSSOM）。</li>
<li>11,得到绘制树之后，需要计算每个结点在页面中的位置，这一个过程称为layout </li>
</ul>
<p>浏览器这边做的工作大致分为以下几步：<br>加载：根据请求的URL进行域名解析，向服务器发起请求，接收文件（HTML、JS、CSS、图象等）。<br>解析：对加载到的资源（HTML、JS、CSS等）进行语法解析，建议相应的内部数据结构（比如HTML的DOM树，JS的（对象）属性表，CSS的样式规则等等）</p>
<h3 id="16-TCP传输的三次握手四次挥手策略"><a href="#16-TCP传输的三次握手四次挥手策略" class="headerlink" title="16,TCP传输的三次握手四次挥手策略"></a>16,TCP传输的三次握手四次挥手策略</h3><blockquote>
<p>三次握手 SYN和ACK</p>
</blockquote>
<p>发送端首先发送一个带SYN标志的数据包给对方。接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。 最后，发送端再回传一个带ACK标志的数据包，代表“握手”结束。 若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。</p>
<blockquote>
<p>四次挥手</p>
<ul>
<li>第一次挥手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</li>
<li>第二次挥手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号）。</li>
<li>第三次挥手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</li>
<li>第四次挥手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。<h3 id="17-new操作符到底干了什么-深入了解"><a href="#17-new操作符到底干了什么-深入了解" class="headerlink" title="17, new操作符到底干了什么?深入了解"></a>17, new操作符到底干了什么?<a href="http://www.cnblogs.com/onepixel/p/5043523.html" target="_blank" rel="external">深入了解</a></h3></li>
<li>1,创建一个空对象,而且this变量引用该对象,同时还继承了该函数的原型.</li>
<li>2,属性和方法被加入到this引用的对象中,</li>
<li>3,新创建的对象由this所引用,而且最后隐式的返回this<h3 id="18-null和undefined的区别"><a href="#18-null和undefined的区别" class="headerlink" title="18, null和undefined的区别?"></a>18, null和undefined的区别?</h3></li>
</ul>
<p>undefined</p>
<ul>
<li>(1)变量被声明了,但是没有赋值,就等于undefined</li>
<li>(2)调用函数时,应该提供的参数没有提供,该参数等于undefined</li>
<li>(3)对象没有赋值的属性,该属性的值为undefined</li>
<li>(4)函数没有返回值时,默认返回undefined<br>null</li>
<li>(1)作为函数的参数,表示该函数的参数不是对象</li>
<li>(2)作为对象原型链的终点</li>
</ul>
</blockquote>
<h3 id="19-js的基本数据类型"><a href="#19-js的基本数据类型" class="headerlink" title="19, js的基本数据类型"></a>19, js的基本数据类型</h3><p>Number,String,Boolean,Null, Undefined,Object,Symbol</p>
<h3 id="20-DOM怎样添加-移除-复制-和创建节点"><a href="#20-DOM怎样添加-移除-复制-和创建节点" class="headerlink" title="20,DOM怎样添加,移除,复制,和创建节点"></a>20,DOM怎样添加,移除,复制,和创建节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建新节点</span></div><div class="line">createDocumentFragment(); <span class="comment">// 创建一个DOM片段</span></div><div class="line">createElement(); <span class="comment">// 创建一个具体的元素</span></div><div class="line">createTextNode(); <span class="comment">// 创建一个文本节点</span></div><div class="line"><span class="comment">//添加,移除,替换</span></div><div class="line">appendChild()</div><div class="line">removeChild()</div><div class="line">replaceChild()</div><div class="line">insertBefore() <span class="comment">// 在已有的子节点前插入一个新的子节点</span></div><div class="line"><span class="comment">// 查找</span></div><div class="line">getElementByTagName() <span class="comment">// 通过标签名称</span></div><div class="line">getElementByName() <span class="comment">// 通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)</span></div><div class="line">getElementById() <span class="comment">// 通过元素ID,唯一性</span></div></pre></td></tr></table></figure>
<h4 id="参考总结"><a href="#参考总结" class="headerlink" title="参考总结"></a>参考总结</h4><p><a href="http://www.cnblogs.com/zichi/p/4359786.html" target="_blank" rel="external">这10道javaScript笔试题你都会么</a><br><a href="https://segmentfault.com/a/1190000007602848" target="_blank" rel="external">正则</a><br><a href="http://www.cnblogs.com/xxcanghai/p/5205998.html" target="_blank" rel="external">2016年十家公司面试小记</a><br><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">浅谈javascript的函数节流</a><br><a href="https://github.com/jayli/jayli.github.com/issues/19" target="_blank" rel="external">面试题1</a><br><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="external">面试题2</a><br><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="external">面试题3</a><br><a href="https://github.com/jawil/blog/issues/22" target="_blank" rel="external">html与css</a><br><a href="https://segmentfault.com/a/1190000010631325?_ea=2359607" target="_blank" rel="external">道阻且长啊TAT(前端面试总结),17年春招面试总结</a></p>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="http://wangyaxing.top/">blog</a></p>
]]></content>
      
        <categories>
            
            <category> interview </category>
            
        </categories>
        
        
        <tags>
            
            <tag> interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于斐波那契数列]]></title>
      <url>/2017/04/09/2017-04-09-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3463546863,3949490182&amp;fm=26&amp;gp=0.jpg" alt="title"></p>
<h1 id="用js实现斐波那契数列"><a href="#用js实现斐波那契数列" class="headerlink" title="用js实现斐波那契数列"></a>用js实现斐波那契数列</h1><p>首先介绍一下，斐波那契数列(Fibonacci sequence)又称黄金分割数列，斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，<br><a id="more"></a></p>
<ul>
<li><p>斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..</p>
</li>
<li><p>这个数列从第3项开始，每一项都等于前两项之和。</p>
<h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span>(n ===<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">以上的发法是能想到的最直观的实现，现在我们测试一下他的运行结果。</div><div class="line">fib(<span class="number">1</span>);</div><div class="line">fib(<span class="number">10</span>)</div><div class="line">fib(<span class="number">50</span>);</div><div class="line">运行发现n=<span class="number">1</span>时，会快速输出<span class="number">1</span>，n=<span class="number">10</span>,时，运行速度稍慢，但是当n=<span class="number">10</span>时，运行就非常慢，原因是什么呢，因为n=<span class="number">50</span>时，要进行差不多<span class="number">50</span>次的函数调用，每次调用，都会重新走<span class="keyword">if</span>的那三个判断条件，而且每次都是从最开始开始计算，当n越大时，性能越差，所以有没有更好的方法来实现它呢？</div></pre></td></tr></table></figure>
<h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span>(n ===<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</div><div class="line">        <span class="keyword">let</span> current = <span class="literal">null</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">           current = b + a;</div><div class="line">           a = b;</div><div class="line">           b = current;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">方法二与方法一不同之处在于，最后一个判断加入了一个<span class="keyword">for</span>循环，current = b + a;当前享等于前两项的和，a = b;把前一项的值赋给a(第前两项)，b = current;把当前值赋给前b(第前一项)，这样当n&gt;<span class="number">1</span>时，只需要在第三个判断走一个循环可以，而不需要一直调用函数，这样做比方法一性能上优化了很多，但是还有没有更好的方法呢?</div></pre></td></tr></table></figure>
<h2 id="实现方法三"><a href="#实现方法三" class="headerlink" title="实现方法三"></a>实现方法三</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = &#123;</div><div class="line">    <span class="number">0</span>: <span class="number">0</span>,</div><div class="line">    <span class="number">1</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> cache[n] === <span class="string">'number'</span></div><div class="line">           ? cache[n]</div><div class="line">           : cache[n] = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line">该方法的实现利用了缓存，这样每次计算的时候，都会把计算出的值存放到cache这个缓存中，等下次传入较大的n时，如果缓存中有需要的值，则直接用缓存中的值，这种方法大大提高了函数的性能。</div><div class="line">还存在一个问题,fib(<span class="number">10000</span>) = <span class="literal">Infinity</span>;这有是为什么呢，</div><div class="line">我们可以从js中数值的取值范围考虑，如何知道js中数值的范围呢，</div><div class="line"> <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE, <span class="built_in">Number</span>.MIN_VALUE); <span class="comment">//取得最大和最小的数</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER, <span class="built_in">Number</span>.MIN_SAFE_INTEGER);取得最大和最小的整数</div><div class="line"><span class="number">1.7976931348623157e+308</span> <span class="number">5e-324</span></div><div class="line"><span class="number">9007199254740991</span> <span class="number">-9007199254740991</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fib(<span class="number">400</span>));</div><div class="line"><span class="built_in">console</span>.log(fib(<span class="number">500</span>));</div><div class="line"><span class="number">1.760236806450138e+83</span></div><div class="line"><span class="number">1.394232245616977e+104</span></div><div class="line">n 在大于<span class="number">500</span>的时候差不多已超出范围</div></pre></td></tr></table></figure>
<p>如果有更好的方法，欢迎指正</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
