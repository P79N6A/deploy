<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小记]]></title>
    <url>%2F2017%2F08%2F12%2F2017-08-11-%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[看到了好多大佬,而且很幸运的中奖了,一个金三角的耳机~今天早上起来的时候下着雨,本来以为不会有那么多人了,可是到的时候会议室真的是坐满了人;上午将的都是h5游戏的发展]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[for in vs for of]]></title>
    <url>%2F2017%2F07%2F03%2F2017-07-03-for-in-vs-for-of%2F</url>
    <content type="text"><![CDATA[for in 和 for of 的区别 for in 更适合遍历对象，不要使用for in 遍历数组 for in 遍历的是数组的索引(即键名)，而for of 遍历的是数组元素值 12345678910111213141516171819202122232425262728293031323334Object.prototype.methods = function () &#123; console.log(this);&#125;;var myObject = &#123; a: 1, b: 2, c: 3,&#125;;使用for in 遍历对象的键名 for (var key in myObject) &#123; console.log(key); &#125; a b c methodsfor in 可以遍历到myObject的原型方法methods，如果不想遍历原型方法和属性的话.可以用hasOwnPropery方法可以判断某属性是否是该对象的实例属性 for (var key in myObject) &#123; if(myObject.hasOwnProperty(key))&#123; console.log(key); &#125; &#125; a b c console.log(Object.keys(myObject)); [ 'a', 'b', 'c' ]Object.keys(myObject).forEach(function(key, index)&#123; console.log(key, myObject[key]);&#125;) a 1 b 2 c 3 同样可以通过ES5的Object.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性。 for of 用来遍历数组的值]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue中scroll的用法]]></title>
    <url>%2F2017%2F06%2F23%2F2017-06-23-vue-scroll%2F</url>
    <content type="text"><![CDATA[12345678910111213141516data () &#123; return &#123; scrolled: false &#125;;&#125;,methods: &#123; handleScroll () &#123; this.scrolled = window.scrollY &gt; 0; &#125;&#125;,created () &#123; window.addEventListener('scroll', this.handleScroll);&#125;,destroyed () &#123; window.removeEventListener('scroll', this.handleScroll);&#125;]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数式编程之尾调用]]></title>
    <url>%2F2017%2F06%2F01%2F2017-06-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B0%BE%E8%B0%83%E7%94%A8%2F</url>
    <content type="text"><![CDATA[尾调用，就是在函数的最后一步调用另一个函数123function foo(x) &#123; return g(x);&#125; 尾调用不一定出现在函数尾部，只要是最后一步操作就行 123456function f(x) &#123; if (x &gt; 0) &#123; return m(x) &#125; return n(x);&#125; 函数m和n都属于尾调用，他们都是函数的最后一步操作 尾调用优化函数调用会在内存形成一个’调用记录‘，保存调用位置和内部变量等信息，如果在A函数中调用B函数，在A函数的调用记录上还会形成一个B的调用记录，等到B函数运行结束后，把结果返回到A，B的调用记录才会消失。如果函数B内部还调用C函数，那就是还有一个C的调用记录栈，以此类推，所有的调用记录，就会形成一个’调用栈‘。 尾调用在于它特殊的调用位置。由于是函数最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置和内部变量都不会再用到了。 ’尾调用优化‘，只调用内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-redux]]></title>
    <url>%2F2017%2F05%2F24%2F2017-05-24-react-redux%2F</url>
    <content type="text"><![CDATA[reduxredux的三个概念: action reducer store action: 一个包含type的object, 通常把一个返回action对象的函数称为action函数, 直接简称为action 1234567function action(data) &#123; return &#123; type: 'Action1', data, &#125;;&#125; reducer: 一个根据action type来更新数据的函数 123456789101112131415function reducer(state = &#123; data: 1 &#125;, action) &#123; switch (action.type) &#123; case 'action1': &#123; const newState = JSON.parse(JSON.stringify(state)); return newState; &#125; case 'action2': &#123; const newState = JSON.parse(JSON.stringify(state)); return newState; &#125; default: &#123; return state; &#125; &#125;&#125; store: 使用createStore从reducer函数创建的数据对象, 包含getState和dispatch方法 1234567import &#123; createStore &#125; from 'redux';let store = createStore(reducer);console.log(store.getState())store.dispatch(action(0))console.log(store.getState()) 注意! 更新数据需要dispatch对应的action react-redux用于将redux于react结合 Provider: 顶层组件, 注入store对象 12345678import &#123; Provider &#125; from 'react-redux';ReactDom.render( &lt;Provider store=&#123;store&#125;&gt; &lt;App /&gt; &lt;/Provider&gt;, document.getElementById('app'),); connect: 工具函数, 参数一为函数, 该函数接收state, 返回一个对象, 对象包含一系列数据. 参数二为函数, 该函数接收dispatch, 返回一个对象, 对象包含一系列方法123456789101112131415161718192021222324252627import &#123; connect &#125; from 'react-redux'; class App extends Component &#123; componentDidMount() &#123; this.props.dispatch(&#123; type: 'action1', data: 1, &#125;); &#125; render() &#123; // this.props.func1(); // this.props.func2(); return ( &lt;div&gt; &lt;/div &gt; ); &#125;&#125;export default connect( state =&gt; (&#123; data: state.data, obj: state.obj, &#125;), dispatch =&gt; (&#123; dispatch &#125;),)(App); immutable.js特殊的object(MAP)/array(LIST) 更新数据: set setIn update updateIn 读取数据: get getIn 可以直接比较(深层比较) 创建(fromJS), 还原(toJS) 123456789101112131415上述的reducer可以用下面的代码优化function reducer(state = immutable.fromJS(&#123; data: 1, obj: &#123; aa: 1 &#125; &#125;), action) &#123; switch (action.type) &#123; case 'action1': &#123; return state.set('data', action.data * 10); &#125; case 'action2': &#123; return state.setIn(['obj', 'aa'], action.data); &#125; default: &#123; return state; &#125; &#125;&#125; 优点 无需深复制, 更新数据自动返回一个新对象 适合与react shouldComponentUpdate结合来优化性能 pure-render-decorator自动创建shouldComponentUpdate的工具, 需要配置babel decorator特性才能使用]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue全家桶+crawler+koa2 实现阴阳师小助手]]></title>
    <url>%2F2017%2F05%2F20%2F2017-5-20-vue%E5%85%A8%E5%AE%B6%E6%A1%B6-crawler-koa2-%E5%AE%9E%E7%8E%B0%E9%98%B4%E9%98%B3%E5%B8%88%E5%B0%8F%E5%8A%A9%E6%89%8B%2F</url>
    <content type="text"><![CDATA[最近一直在玩阴阳师，看了好多小助手，觉得太复杂了，还得登录什么的，想着自己写一个简单的小助手，只要输入要搜索的式神，我想知道的关于这个式神的数据就能显示出来。只是第一版，前端用vue全家桶实现的，很适合刚开始接触vue的，后端用node实现的，如果有更好的建议或者想一起合作写个更好用点的，欢迎联系 作者。 yys-fe(阴阳师小助手前端) A Vue.js project github项目链接 阴阳师小助手后端实现 nodejs + crawler + koa2 + mongoose 效果图 基本- 构建工具：webpack； - 语言：Es6； - 代码规范：eslint - 应用：vue， vuex（数据管理架构）， vue-router（路由）， mint-ui（ul组件）， vue-axios（vue做的ajax请求） 目录结构1234567891011121314151617|-- [build] //构建服务和webpack配置|-- [config] //项目不同环境的配置|-- [dist] //文件服务器根目录 |-- [node_modules] //项目依赖|-- [src] //源码| |-- [assets] //资源文件| |-- [components] //项目模块文件夹| |-- [store] //存储数据| | |-- index.js //vuex store 定义| |-- App.vue //主页面 | |-- main.js //webpack预编译入口| |-- [router] //全局路由定义|-- .babelrc //babel配置|-- .eslintrc.js //eslint rule 定义|-- index.html //项目入口文件|-- package.json //项目配置文件|-- README.md //关于启动项目的命令和含义 已经完成的模块 式神搜索页面(支持模糊搜索) 式神搜索结果页面 式神列表页面 式神详细信息页面 [X] 推荐御魂 [X] 推荐搭配 [X] 式神点评 待完成与优化 搜索功能添加历史搜索和热门搜索 式神攻略 式神视频 页面样式的优化 Build Setup``` bash install dependenciesnpm install serve with hot reload at localhost:8080npm run dev build for production with minificationnpm run build 关于用vue时遇到的坑，记录在我的博客,希望可以对大家有用目前小编在学react，所以用react也写了一版,所以刚开始接触react的童鞋也可以看一下，想着第二版的ui设计的好看一点儿，功能再多一点儿，期待更多的建议。 Aboutaboutmegithubblog]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序算法]]></title>
    <url>%2F2017%2F05%2F03%2F2017-05-03-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[排序算法 冒泡算法 12345678910111213function bubbleSort(arr) &#123; for(let i = 0; i &lt; arr.length; i++) &#123; for (var j = 0; j &lt; arr.length - 1 - i; j++) &#123; if (arr[j] &gt; arr[j+1]) &#123; //相邻元素两两对比 var temp = arr[j+1]; //元素交换 arr[j+1] = arr[j]; arr[j] = temp; &#125; &#125; &#125; return arr;&#125;console.log(bubbleSort([1,23,4,3])); 快速排序 1234567891011121314151617function quickSort(arr) &#123; if(arr.length &lt;= 1) &#123; return arr; &#125; let leftArr = []; let rightArr = []; let q = arr[0]; for(let i = 1; i&lt;arr.length;i++) &#123; if(arr[i] &gt; q) &#123; rightArr.push(arr[i]); &#125; else &#123; leftArr.push(arr[i]); &#125; &#125; return [].concat(quickSort(leftArr),[q],quickSort(rightArr));&#125;console.log(quickSort([1,23,4,3]));]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js经典面试题]]></title>
    <url>%2F2017%2F05%2F02%2F2017-05-02-js%E7%BB%8F%E5%85%B8%E7%AC%94%E8%AF%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[面试之前都会从网上找很多面试题来看,尤其是看到经典面试题,及必会的面试题,都是好好的看上几遍(其实更多的时候都是在背),可是总感觉面试之前看题作用并不大,因为你不理解的问题,还是会不理解,面试管随便一问,就不行了.其实面试几次后就会发现,经常问的问题也就那几个,比如,闭包,原型链,this,等.刚开始的时候真的是理解不了,然后就看书,强烈推荐以及&lt;你不知道的javascript系列&gt;,在实际项目中遇到坑的时候,就反复看,看的时候很难受,但是当真正理解了之后,就会恍然大悟,所以功夫还是下在平时,临时抱佛脚真的没啥用~ 1,考察this 1234567891011121314var length = 10;function fn() &#123; console.log(this.length);&#125;var obj = &#123; length: 5, method: function(fn) &#123; fn(); arguments[0](); &#125;&#125;;obj.method(fn, 1); 10 ，2 第一次输出10应该没有问题。我们知道取对象属于除了点操作符还可以用中括号，所以第二次执行时相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。 123456789101112131415var length = 10;function fn() &#123; console.log(this.length);&#125;var obj = &#123; length: 5, method: function(fn) &#123; fn(); const fun = arguments[0]; fun()； &#125;&#125;;obj.method(fn, 1); 10 102,var和函数的提前声明 12345678function fn(a) &#123; console.log(a); var a = 2; function a() &#123;&#125; console.log(a); &#125;fn(1); function a() {} 2 var和function是会提前声明的.而且function是优先于var声明的(如果同时存在的话),所以刚开始输出的就是一个funciton,接着往下执行a进行重新赋值了,故第二次输出的是2； 3，局部变量和全局变量1234567891011121314var f = true;if (f === true) &#123; var a = 10;&#125;function fn() &#123; var b = 20; c = 30;&#125;fn();console.log(a);console.log(b);console.log(c); 输出 10 报错 30 这是个我犯了很久的错误，很长一段时间我都以为{…}内的新声明的变量是局部变量，后来我才发现function内的新声明的变量才是局部变量，而没有用var声明的变量在哪里都是全局变量。再次提醒切记只有function(){}内新声明的才能是局部变量，while{…}、if{…}、for(..) 之内的都是全局变量（除非本身包含在function内）。 4，变量隐式声明1234for( 'a' in window) &#123; var a = 10;&#125;console.log(a); 10 funciton和var会提前声明,而其实{…}内的变量也会提前声明，于是代码还没执行前a已经被声明了。所以 ‘a’ in window会返回true,a被赋值 5，给基本类型数据添加属性，不报错，但取值时是undefined1234567var a = 10;a.pro = 10;console.log(a.pro + a);var s = 'hello';s.pro = 'world';console.log(s.pro + s); NaN undefinedhello 给基本类型数据加属性不报错，但是引用的话返回undefined,10+undefined返回NaN,而undefined和string相加时转变成了字符串 6，函数声明优先于变量声明123console.log(typeof fn);function fn() &#123;&#125;;var fn; function 因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。 7,判断一个字符串中出现次数最多的字符，并统计次数1234567891011121314151617181920var s = 'aaabbbcccaaabbbaaa';var obj = &#123;&#125;;var letter;var maxn = -1;for (let i = 0; i&lt; s.length; i++) &#123; if(obj[s[i]]) &#123; obj[s[i]] ++; if(obj[s[i]] &gt; maxn) &#123; maxn = obj[s[i]]; letter = s[i]; &#125; &#125; else &#123; obj[s[i]] = 1; if(obj[s[i]] &gt; maxn) &#123; maxn = obj[s[i]]; letter = s[i]; &#125; &#125; &#125;console.log(`$&#123;letter&#125;:$&#123;maxn&#125;`); 正则12345678910var s = 'aaabbbcccaaabbbaaa';var a = s.split('');a.sort();s = a.join('');var pattern = /(\w)\1*/g;var ans = s.match(pattern);ans.sort(function(a, b) &#123; return a.length &lt; b.length;&#125;)console.log(ans[0][0] + ':' + ans[0].length); 8， 经典闭包123456789101112131415161718192021222324252627282930&lt;!--html--&gt;&lt;ul&gt; &lt;li&gt;这是第1个&lt;/li&gt; &lt;li&gt;这是第2个&lt;/li&gt; &lt;li&gt;这是第3个&lt;/li&gt; &lt;li&gt;这是第4个&lt;/li&gt;&lt;/ul&gt;&lt;!--js--&gt;一：for(var i = 0; i &lt; lis.length; i++) &#123; lis[i].index = i; lis[i].onclick = function() &#123; alert(this.index); &#125;;&#125;二:for(var i = 0; i &lt; lis.length; i++) &#123; (function(i) &#123; lis[i].onclick = function() &#123; alert(i); &#125;; &#125;)(i); &#125;三：for(let i = 0; i &lt; lis.length; i++) &#123; lis[i].onclick = function() &#123; alert(i); &#125;;&#125; 从0开始隔10s按顺序出现’第一次出现’,’第二次出现’,’第三次出现‘123456789101112131415const datas = ['1', '2', '3'];let timer = null;for (let i = 0; i &lt; datas.length; i++) &#123; // const index = i; if (timer) &#123; clearTimeout(timer); let timer = setTimeout(function () &#123; console.log(datas[i]); &#125;, 10000 * i) &#125; else &#123; let timer = setTimeout(function () &#123; console.log(datas[i]); &#125;, 10000 * i) &#125;&#125;; 9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″1234567891011121314function parseQueryString(url) &#123; var obj = &#123;&#125;; var a = url.split('?'); if(a.length === 1) return obj; var b = a[1].split('&amp;'); for(var i = 0, length = b.length; i &lt; length; i++) &#123; var c = b[i].split('='); obj[c[0]] = c[1]; &#125; return obj;&#125;var url = 'http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2';var obj = parseQueryString(url);console.log(obj.key0, obj.key1, obj.key2); // 0 1 2 10,this1234567891011var baz=3;var bazz=&#123; baz: 2, getbaz: function() &#123; return this.baz &#125;&#125;console.log(bazz.getbaz())var g=bazz.getbaz;console.log(g());第一个输出2，第二个输出3,函数作为对象本身属性调用的时候this指向对象，作为普通函数调用的时候就指向全局了 11，数组方法 数组排序:写一个js函数,将数组对象按照一定的顺序进行排序，且可通过参数决定升降序 123456789101112131415161718192021222324const list = [ &#123; "name": "first", "index": 1, &#125;, &#123; "name": "second", "index": 2, &#125;, &#123; "name": "third", "index": 3, &#125;, &#123; "name": "fourth", "index": 4, &#125;,]function compare(property)&#123; return function(a,b)&#123; return a[property] - a[property]; &#125;&#125;console.log(list.sort(compare('index'))) 12,求一个字符串的字节长度12345678910111213function GetBytes(str)&#123; var len = str.length; var bytes = len; for(var i=0; i&lt;len; i++)&#123; if (str.charCodeAt(i) &gt; 255) bytes++; &#125; return bytes; &#125;alert(GetBytes("你好,as"));str = 'hello world';console.log(str.charCodeAt(0)); // 104, 返回指定索引处字符的 Unicode 数值,大于255为中文console.log(str.charAt(0)); // h, 返回指定位置的字符, 13 jsonp原理及过程 利用标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。 当需要通讯时，本站脚本创建一个元素，地址指向第三方的API网址，形如 并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。 第三方产生的响应为json数据的包装（故称之为jsonp，即json padding），形如：callback({“name”:”hax”,”gender”:”Male”})这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。 14, link和@import区别 link属于html标签，而@import是css提供的。 页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。 link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。 link方式样式的权重高于@import的 15,参考这10道javaScript笔试题你都会么正则2016年十家公司面试小记浅谈javascript的函数节流常见面试题1常见面试题2面试题3html与css道阻且长啊TAT(前端面试总结),17年春招面试总结 Aboutaboutmegithubblog]]></content>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于斐波那契数列]]></title>
    <url>%2F2017%2F04%2F09%2F2017-04-09-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%2F</url>
    <content type="text"><![CDATA[用js实现斐波那契数列首先介绍一下，斐波那契数列(Fibonacci sequence)又称黄金分割数列，斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用， 斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368…….. 这个数列从第3项开始，每一项都等于前两项之和。 实现方法一 1234567891011121314function fib(n) &#123; if(n === 0) &#123; return 0; &#125; else if(n ===1) &#123; return 1; &#125; else &#123; return fib(n-1)+fib(n-2); &#125;&#125;以上的发法是能想到的最直观的实现，现在我们测试一下他的运行结果。fib(1);fib(10)fib(50);运行发现n=1时，会快速输出1，n=10,时，运行速度稍慢，但是当n=10时，运行就非常慢，原因是什么呢，因为n=50时，要进行差不多50次的函数调用，每次调用，都会重新走if的那三个判断条件，而且每次都是从最开始开始计算，当n越大时，性能越差，所以有没有更好的方法来实现它呢？ 实现方法二1234567891011121314151617function fib(n) &#123; if(n === 0) &#123; return 0; &#125; else if(n ===1) &#123; return 1; &#125; else &#123; let a = 0, b = 1; let current = null; for(let i = 2; i &lt;= n; i++) &#123; current = b + a; a = b; b = current; &#125; return current; &#125;&#125;方法二与方法一不同之处在于，最后一个判断加入了一个for循环，current = b + a;当前享等于前两项的和，a = b;把前一项的值赋给a(第前两项)，b = current;把当前值赋给前b(第前一项)，这样当n&gt;1时，只需要在第三个判断走一个循环可以，而不需要一直调用函数，这样做比方法一性能上优化了很多，但是还有没有更好的方法呢? 实现方法三1234567891011121314151617181920212223var cache = &#123; 0: 0, 1: 1&#125;;function fib(n) &#123; return typeof cache[n] === 'number' ? cache[n] : cache[n] = fib(n - 1) + fib(n - 2);&#125;该方法的实现利用了缓存，这样每次计算的时候，都会把计算出的值存放到cache这个缓存中，等下次传入较大的n时，如果缓存中有需要的值，则直接用缓存中的值，这种方法大大提高了函数的性能。还存在一个问题,fib(10000) = Infinity;这有是为什么呢，我们可以从js中数值的取值范围考虑，如何知道js中数值的范围呢， console.log(Number.MAX_VALUE, Number.MIN_VALUE); //取得最大和最小的数console.log(Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER);取得最大和最小的整数1.7976931348623157e+308 5e-3249007199254740991 -9007199254740991console.log(fib(400));console.log(fib(500));1.760236806450138e+831.394232245616977e+104n 在大于500的时候差不多已超出范围 如果有更好的方法，欢迎指正]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
