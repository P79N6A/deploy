<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一个怎样都不想认输的🌹]]></title>
      <url>/2017/08/22/%E4%B8%8D%E6%83%B3%E5%83%8F%E7%94%9F%E6%B4%BB%E4%BD%8E%E5%A4%B4/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1442902-12ed174df8fe5651?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>毕业两个月,在北京已待了一年多,我成长了很多,无论技术,还是心理…<br><a id="more"></a><br>现在有点开始明白之前为什么一个要晚上十点下班的公司,当时面试技术过了,但是最后却要了一个男生,(最后没被面试上,那个技术面试官还特意打电话说,不是因为你技术不行,而是我们这儿加班很严重,所以综合考虑招了个男同事,让我继续💪);</p>
<p>连续快一个月了,每天晚上一点睡,现在感觉真的身体快吃不消了,昨天上班头疼的已坚持不住,所有跟老大说了一下,晚上八点就早点回去了,电梯里碰到了清洁工阿姨,阿姨会问,吃饭了么,又加班了么,这个点下班真的是太晚了,回去早点休息…(突然想起我妈对我的唠叨)</p>
<p>本来打算晚上回去就睡,躺在床上,突然想起一个解决今天复杂的数据关系的一个思路,于是爬起来打开电脑开始尝试,看了看时间,晚上9点,心里想着最晚11点一定要睡,可是写代码的过程中又遇到很多不会的问题,于是好奇心促使我弄明白我什么…</p>
<p>就这样过了12点…,</p>
<p>一点的时候,实在太困,匆忙把代码传到git上,倒头就睡…<br><img src="http://upload-images.jianshu.io/upload_images/5325674-1a64ccd89f904f17.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="title"></p>
<p>闹钟响了,实在挣不开眼,想着再睡十分钟,一会洗漱一定不墨迹;</p>
<p>10分钟搞定,出门的时候看着天气不对,又赶紧找了把伞,看了一个,好,衣服没穿反,放心的找了辆小黄,骑着飞速跑起来,不好,这两车骑得有点费劲,算了,还是赶紧走吧,有辆车就不错了,路上很堵,堵到一路上都被自行车骑着走,但是心理还是很庆幸自己今天没有做公交车;</p>
<p>到了一个红绿灯路口,看到指挥交通的大爷,等红灯的时候大爷很热情的跟我聊天,说今天要下大雨,问我有没有带雨伞,(有一次因为胃疼差点晕倒,这位大爷看到了就扶了我一下,还打算送我去医院,说小姑娘一个人在外面要好好照顾自己,当时眼泪真的就下来了,在帝都这样冷漠的城市,有个陌生人能对你这样,突然感觉很温暖)</p>
<hr>
<p>有时候会想是不是自己老了啊,去年这会刚工作,也是每天很累,因为很多东西要学,记得当时每天晚上看书到两点,周末不加班的时候,也是推了很多’约会’,睡上一上午,然后又开始敲代码…</p>
<p>很累的时候,有时候真的是想放弃,有亲戚跟我打电话,说他们那儿招这种刚毕业的学计算机的,一个月刚开始5000,还给解决住房问题,问我要不要考虑回去,毕竟帝都真的很恐怖;可是我刚毕业技术还有很大的上升空间,还是北京这样的大城市技术发展比较好,更能快速成长,</p>
<p>有时候也会想不如拿着自己的高中教师证回去当老师,或者考个公务员,或者找的对自己好的男的,直接结婚,像很多身边的女朋友一样,然后带孩子…可是那样的生活好像一眼就能望到头,那是我喜欢的生活么?</p>
<p>想起当初自己为什么铁了心的要转行,当时也是能想到以后会遇到很多困难,会很累,找工作的时候,学历就是普通本科,专业又是农业,我只能靠自己过硬的技术来比过自己的竞争者.</p>
<p>我正在为自己想要的生活去奋斗,不想平庸的过一辈子,在外面的时候,不要把自己当成一个女生,因为生活并不会因为你是女生而对你手下留情,所有还是像个汉子一样去努力吧,我相信越努力越幸运</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4968905-11f9b598d609bff1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"></p>
]]></content>
      
        
        <tags>
            
            <tag> 随便写写 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[揭开vue神秘面纱]]></title>
      <url>/2017/08/20/%E6%8F%AD%E5%BC%80vue%E7%A5%9E%E7%A7%98%E9%9D%A2%E7%BA%B1/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>带你一步一步走进vue<br><a id="more"></a></p>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="https://github.com/funnycoderstar/vue-demo" target="_blank" rel="external">源码</a><br><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="https://github.com/funnycoderstar/blog" target="_blank" rel="external">blog</a></p>
<h4 id="实现过程-直接上代码"><a href="#实现过程-直接上代码" class="headerlink" title="实现过程,直接上代码"></a>实现过程,直接上代码</h4><h5 id="1-实现简单的v-model的绑定"><a href="#1-实现简单的v-model的绑定" class="headerlink" title="1,实现简单的v-model的绑定"></a>1,实现简单的v-model的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实现v-model的绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">v-model</span>=<span class="string">"a"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>可以打开控制台,然后输入vm.查看view到model的绑定;然后改变input的值,再次在控制台输出vm.查看model到view的绑定<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                b: 10000,</span></div><div class="line"><span class="undefined">                a: 1</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            el: <span class="string">'#input'</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></div><div class="line"><span class="undefined">            vm.a++;</span></div><div class="line"><span class="undefined">        &#125;, 1000);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelector(data.el);</div><div class="line">    <span class="keyword">let</span> model = input.getAttribute(<span class="string">'v-model'</span>);</div><div class="line">    <span class="keyword">if</span>(!data.data) &#123;</div><div class="line">        <span class="built_in">console</span>.warn(<span class="string">`你没有定义data`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(model &amp;&amp; data.data.hasOwnProperty(model))&#123;</div><div class="line">        <span class="comment">// 实现model到view的绑定</span></div><div class="line">        input.value = data.data[model];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[model];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line"></div><div class="line">                input.value = data.data[model] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">// 实现view到model的绑定</span></div><div class="line">        input.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>[model] = input.value;</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.warn(<span class="string">`你没有定义<span class="subst">$&#123;model&#125;</span>属性`</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-实现多个v-model的绑定"><a href="#2-实现多个v-model的绑定" class="headerlink" title="2,实现多个v-model的绑定"></a>2,实现多个v-model的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实现多个v-model的绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                a: 0,</span></div><div class="line"><span class="undefined">                b: 100,</span></div><div class="line"><span class="undefined">                c: 2,</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            el: <span class="string">'#form'</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> input) &#123;</div><div class="line">        <span class="keyword">let</span> model = item.getAttribute(<span class="string">'v-model'</span>);</div><div class="line">        item.value = data.data[model];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[model];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">                item.value = data.data[model] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">        item.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>[model] = item.value;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-实现模板的绑定"><a href="#3-实现模板的绑定" class="headerlink" title="3,实现模板的绑定"></a>3,实现模板的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>实现&#123;&#123;&#125;&#125;的绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; a  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        &#123;&#123; b &#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c  &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="undefined">            data: &#123;</span></div><div class="line"><span class="undefined">                a: 0,</span></div><div class="line"><span class="undefined">                b: 100,</span></div><div class="line"><span class="undefined">                c: 2,</span></div><div class="line"><span class="undefined">            &#125;,</span></div><div class="line"><span class="javascript">            el: <span class="string">'#form'</span></span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.querySelectorAll(<span class="string">'input'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> input) &#123;</div><div class="line">        <span class="keyword">let</span> model = item.getAttribute(<span class="string">'v-model'</span>);</div><div class="line">        item.value = data.data[model];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[model];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">                item.value = data.data[model] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">        item.addEventListener(<span class="string">"input"</span>, () =&gt; &#123;</div><div class="line">            <span class="keyword">this</span>[model] = item.value;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">const</span> pss = <span class="built_in">document</span>.querySelector(data.el).childNodes;</div><div class="line">    <span class="keyword">let</span> ps = [];</div><div class="line">    <span class="keyword">let</span> arr = [];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getText</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = value.length; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (value[i].nodeType === <span class="number">1</span>) &#123;</div><div class="line">                getText(value[i].childNodes);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value[i].nodeType === <span class="number">3</span>) &#123;</div><div class="line">                ps.push(value[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    getText(pss);</div><div class="line">    <span class="keyword">const</span> reg = <span class="regexp">/&#123;&#123;(.*)&#125;&#125;/</span>;</div><div class="line">    ps.forEach(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (reg.test(i.nodeValue)) &#123;</div><div class="line">            arr.push(i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(arr);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> p <span class="keyword">of</span> arr) &#123;</div><div class="line">        <span class="keyword">let</span> $p = reg.exec(p.nodeValue)[<span class="number">0</span>].slice(<span class="number">2</span>, p.nodeValue.length - <span class="number">2</span>).replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</div><div class="line">        p.nodeValue = data.data[$p];</div><div class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, $p, &#123;</div><div class="line">            configurable: <span class="literal">true</span>,</div><div class="line">            enumerable: <span class="literal">true</span>,</div><div class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> data.data[$p];</div><div class="line">            &#125;,</div><div class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">                p.nodeValue = data.data[$p] = newVal;</div><div class="line">            &#125;,</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 错在多次赋值被覆盖的错误,所以思路应该变为找到所有绑定a, b, c的值,然后统一赋值</span></div></pre></td></tr></table></figure>
<h5 id="4-实现v-bind-v-on的绑定"><a href="#4-实现v-bind-v-on的绑定" class="headerlink" title="4,实现v-bind,v-on的绑定"></a>4,实现v-bind,v-on的绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"form"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试v-model的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"a"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试&#123;&#123;&#125;&#125;的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; a &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        &#123;&#123; a &#125;&#125;&#123;&#123; b &#125;&#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"b"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"c"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; c &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是测试v-bind和v-on的效果<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"src"</span> <span class="attr">v-bind:width</span>=<span class="string">"width1"</span> <span class="attr">:height</span>=<span class="string">"height"</span> <span class="attr">v-on:click</span>=<span class="string">"log"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>打开控制台,点击img,查看v-on的绑定效果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcss.com/vue/2.4.2/vue.js"&gt;&lt;/script&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.obj = &#123;</span></div><div class="line"><span class="undefined">            a: 0,</span></div><div class="line"><span class="undefined">            b: 100,</span></div><div class="line"><span class="javascript">            c: <span class="string">'这是测试'</span>,</span></div><div class="line"><span class="javascript">            src: <span class="string">"http://cdn.suisuijiang.com/message_1492395396308.png?imageView2/2/w/40/h/40"</span>,</span></div><div class="line"><span class="undefined">            width1: 100,</span></div><div class="line"><span class="undefined">            height: 100,</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="javascript">        <span class="built_in">window</span>.vm = <span class="keyword">new</span> Vue(&#123;</span></div><div class="line"><span class="javascript">            el: <span class="string">'#form'</span>,</span></div><div class="line"><span class="undefined">            data: obj,</span></div><div class="line"><span class="undefined">            methods: &#123;</span></div><div class="line"><span class="javascript">                log: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'你点击了图片'</span>);</span></div><div class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">`当前c的值为 <span class="subst">$&#123;<span class="keyword">this</span>.c&#125;</span>`</span>);</span></div><div class="line"><span class="undefined">                &#125;</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<pre><code class="js"><span class="comment">/**</span>
<span class="comment"> * 解析dom指令</span>
<span class="comment"> * @param {*} $dom 根节点</span>
<span class="comment"> * @param {*} instructs 解析结果</span>
<span class="comment"> */</span>
<span class="function"><span class="keyword">function</span> <span class="title">handleInstruct</span>(<span class="params">$dom, instructs = {}</span>) </span>{
    <span class="function"><span class="keyword">function</span> <span class="title">addInstruct</span>(<span class="params">model, type, $node</span>) </span>{
        <span class="keyword">if</span> (instructs[model]) {
            <span class="keyword">if</span> (instructs[model][type]) {
                instructs[model][type].push($node);
            } <span class="keyword">else</span> {
                instructs[model][type] = [$node];
            }
        } <span class="keyword">else</span> {
            instructs[model] = {
                [type]: [$node]
            };
        }
    }

    <span class="keyword">if</span> ($dom.attributes) {
        <span class="keyword">for</span> (<span class="keyword">const</span> attr <span class="keyword">of</span> $dom.attributes) {
            <span class="keyword">if</span> (attr.name === <span class="string">'v-model'</span>) {
                <span class="keyword">const</span> model = $dom.getAttribute(<span class="string">'v-model'</span>);
                addInstruct(model, <span class="string">'model'</span>, $dom);
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(v-bind|:)/</span>.test(attr.nodeName)) {
                <span class="keyword">const</span> parseResult = attr.nodeName.match(<span class="regexp">/^(?:v-bind)?:([a-zA-Z_$][a-zA-Z0-9_$]*)/</span>);
                <span class="keyword">if</span> (parseResult &amp;&amp; parseResult[<span class="number">1</span>]) {
                    addInstruct(attr.nodeValue.trim(), <span class="string">'bind'</span>, {
                        $dom,
                        attr: parseResult[<span class="number">1</span>]
                    });
                }
            } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^(v-on|@)/</span>.test(attr.name)) {
                <span class="keyword">const</span> parseResult = attr.name.match(<span class="regexp">/^(?:v-on:|@)?([a-zA-Z_$][a-zA-Z0-9_$]*)/</span>);
                <span class="keyword">if</span> (parseResult &amp;&amp; parseResult[<span class="number">1</span>]) {
                    addInstruct(attr.nodeValue.trim(), <span class="string">'on'</span>, {
                        $dom,
                        event: parseResult[<span class="number">1</span>]
                    });
                }
            }
        }
    }

    <span class="keyword">if</span> ($dom.childNodes) {
        <span class="keyword">for</span> (<span class="keyword">const</span> $child <span class="keyword">of</span> $dom.childNodes) {
            <span class="keyword">switch</span> ($child.nodeType) {
                <span class="comment">// ELEMENT_NODE</span>
                <span class="keyword">case</span> <span class="number">1</span>: {
                    handleInstruct($child, instructs);
                    <span class="keyword">break</span>;
                }
                <span class="comment">// TEXT_NODE</span>
                <span class="keyword">case</span> <span class="number">3</span>: {
                    <span class="keyword">const</span> parseResult = $child.data.match(<span class="regexp">/{{[ ]*([a-zA-Z_$][a-zA-Z0-9_$]*)[ ]*}}/g</span>);
                    <span class="keyword">if</span> (parseResult) {
                        parseResult.forEach(<span class="function"><span class="params">x</span> =&gt;</span> {
                            <span class="keyword">const</span> model = x.match(<span class="regexp">/[a-zA-Z_$][a-zA-Z0-9_$]*/</span>);
                            <span class="keyword">if</span> (model) {
                                addInstruct(model, <span class="string">'expression'</span>, {
                                    $dom: $child,
                                    exp: $child.data
                                });
                            }
                        });
                    }
                    <span class="keyword">break</span>;
                }
                <span class="keyword">default</span>:
                    <span class="keyword">break</span>;
            }
        }
    }

    <span class="keyword">return</span> instructs;
}

<span class="function"><span class="keyword">function</span> <span class="title">updateDom</span>(<span class="params">vm, instructs, model, shouldRegisterEvent = false</span>) </span>{
    <span class="comment">// 实现v-model的绑定</span>
    <span class="keyword">if</span> (instructs[model].model) {
        <span class="keyword">for</span> (<span class="keyword">const</span> $el <span class="keyword">of</span> instructs[model].model) {
            $el.value =  vm[model];
            <span class="keyword">if</span> (shouldRegisterEvent) {
                $el.oninput = <span class="function"><span class="params">()</span> =&gt;</span> {
                    <span class="keyword">this</span>[model] = $el.value;
                };
            }
        }
    }
    <span class="comment">// 实现{{}}的绑定</span>
    <span class="keyword">if</span> (instructs[model].expression) {
        <span class="keyword">for</span> (<span class="keyword">let</span> { $dom, exp } <span class="keyword">of</span> instructs[model].expression) {
            <span class="keyword">const</span> parseResult = exp.match(<span class="regexp">/{{[ ]*([a-zA-Z_$][a-zA-Z0-9_$]*)[ ]*}}/g</span>);
            <span class="keyword">if</span> (parseResult) {
                parseResult.forEach(<span class="function"><span class="params">x</span> =&gt;</span> {
                    <span class="keyword">const</span> m = x.match(<span class="regexp">/[a-zA-Z_$][a-zA-Z0-9_$]*/</span>);
                    <span class="keyword">if</span> (m) {
                        exp = exp.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`{{[ ]*${m[0]}[ ]*}}`</span>), vm[m[<span class="number">0</span>]]);
                    }
                });
            }
            $dom.textContent = exp;
        }
    }
    <span class="comment">// 实现v-bind的绑定</span>
    <span class="keyword">if</span> (instructs[model].bind) {
        <span class="keyword">for</span> (<span class="keyword">const</span> {$dom, attr} <span class="keyword">of</span> instructs[model].bind) {
            $dom.setAttribute(attr, vm[model]);
        }
    }
}

<span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">params</span>) </span>{
    <span class="keyword">const</span> $dom = <span class="built_in">document</span>.querySelector(params.el);
    <span class="keyword">if</span> (!$dom) {
        <span class="built_in">console</span>.error(<span class="string">`dom "<span class="subst">${params.el}</span>" not exist`</span>);
        <span class="keyword">return</span>;
    }

    <span class="keyword">const</span> vm = {};
    <span class="keyword">const</span> instructs = handleInstruct($dom);
    <span class="comment">// console.log(instructs);</span>

    <span class="keyword">for</span> (<span class="keyword">const</span> model <span class="keyword">in</span> instructs) {
        <span class="keyword">if</span> (model &amp;&amp; params.data &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(params.data, model)) {
            vm[model] = params.data[model];
            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, model, {
                get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
                    <span class="keyword">return</span> vm[model];
                },
                set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>{
                    vm[model] = newValue;
                    updateDom(vm, instructs, model);
                }
            });
            updateDom.call(<span class="keyword">this</span>, vm, instructs, model, <span class="literal">true</span>);
        }
        <span class="comment">// 实现v-on的绑定</span>
        <span class="keyword">if</span> (instructs[model].on) {
            <span class="keyword">for</span> (<span class="keyword">const</span> { $dom, event } <span class="keyword">of</span> instructs[model].on) {
                $dom.addEventListener(event, params.methods[model].bind(<span class="keyword">this</span>));
            }
        }
    }
}

<span class="built_in">window</span>.Vue = Vue;
</code></pre>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小记]]></title>
      <url>/2017/08/12/2017-08-11-%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1581250268,3885048217&amp;fm=173&amp;s=0947AB42C3E4BCEC264DC41301008093&amp;w=640&amp;h=401&amp;img.JPEG" alt="title"><br>看到了好多大佬,而且很幸运的中奖了,一个金三角的耳机~<br><a id="more"></a><br>今天早上起来的时候下着雨,本来以为不会有那么多人了,可是到的时候会议室真的是坐满了人;<br>上午将的都是h5游戏的发展</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[for in vs for of]]></title>
      <url>/2017/07/03/2017-07-03-for-in-vs-for-of/</url>
      <content type="html"><![CDATA[<p><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=1652442167,4081781189&amp;fm=173&amp;s=67CAF30748133CC46E9D988C0300F083&amp;w=630&amp;h=379&amp;img.JPEG" alt="title"><br><a id="more"></a></p>
<h3 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for in 和 for of 的区别"></a>for in 和 for of 的区别</h3><ul>
<li><p>for in 更适合遍历对象，不要使用for in 遍历数组</p>
</li>
<li><p>for in 遍历的是数组的索引(即键名)，而for of 遍历的是数组元素值</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.methods = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> myObject = &#123;</div><div class="line">    a: <span class="number">1</span>,</div><div class="line">    b: <span class="number">2</span>,</div><div class="line">    c: <span class="number">3</span>,</div><div class="line">&#125;;</div><div class="line">使用<span class="keyword">for</span> <span class="keyword">in</span> 遍历对象的键名</div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</div><div class="line">   <span class="built_in">console</span>.log(key);</div><div class="line"> &#125;</div><div class="line"> a</div><div class="line"> b</div><div class="line"> c</div><div class="line"> methods</div><div class="line"><span class="keyword">for</span> <span class="keyword">in</span> 可以遍历到myObject的原型方法methods，如果不想遍历原型方法和属性的话.可以用hasOwnPropery方法可以判断某属性是否是该对象的实例属性</div><div class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> myObject) &#123;</div><div class="line">     <span class="keyword">if</span>(myObject.hasOwnProperty(key))&#123;</div><div class="line">       <span class="built_in">console</span>.log(key);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> a</div><div class="line"> b</div><div class="line"> c</div><div class="line"></div><div class="line"> <span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(myObject));  [ <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span> ]</div><div class="line"><span class="built_in">Object</span>.keys(myObject).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key, index</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(key, myObject[key]);</div><div class="line">&#125;)</div><div class="line"> a <span class="number">1</span></div><div class="line"> b <span class="number">2</span></div><div class="line"> c <span class="number">3</span></div><div class="line"> 同样可以通过ES5的<span class="built_in">Object</span>.keys(myObject)获取对象的实例属性组成的数组，不包括原型方法和属性。</div></pre></td></tr></table></figure>
<ul>
<li>for of 用来遍历数组的值</li>
</ul>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue中scroll的用法]]></title>
      <url>/2017/06/23/2017-06-23-vue-scroll/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1541368-d9be1b3b39abc037?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    scrolled: <span class="literal">false</span></div><div class="line">  &#125;;</div><div class="line">&#125;,</div><div class="line">methods: &#123;</div><div class="line">  handleScroll () &#123;</div><div class="line">    <span class="keyword">this</span>.scrolled = <span class="built_in">window</span>.scrollY &gt; <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">created () &#123;</div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</div><div class="line">&#125;,</div><div class="line">destroyed () &#123;</div><div class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">'scroll'</span>, <span class="keyword">this</span>.handleScroll);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[函数式编程之尾调用]]></title>
      <url>/2017/06/01/2017-06-01-%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B9%8B%E5%B0%BE%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2017/bg2017022201.jpg" alt="title"><br><a id="more"></a></p>
<h2 id="尾调用，就是在函数的最后一步调用另一个函数"><a href="#尾调用，就是在函数的最后一步调用另一个函数" class="headerlink" title="尾调用，就是在函数的最后一步调用另一个函数"></a>尾调用，就是在函数的最后一步调用另一个函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> g(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>尾调用不一定出现在函数尾部，只要是最后一步操作就行</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">return</span> m(x)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> n(x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数m和n都属于尾调用，他们都是函数的最后一步操作</p>
<h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>函数调用会在内存形成一个’调用记录‘，保存调用位置和内部变量等信息，如果在A函数中调用B函数，在A函数的调用记录上还会形成一个B的调用记录，等到B函数运行结束后，把结果返回到A，B的调用记录才会消失。如果函数B内部还调用C函数，那就是还有一个C的调用记录栈，以此类推，所有的调用记录，就会形成一个’调用栈‘。</p>
<p>尾调用在于它特殊的调用位置。由于是函数最后一步操作，所以不需要保留外层函数的调用记录，因为调用位置和内部变量都不会再用到了。</p>
<p>’尾调用优化‘，只调用内层函数的调用记录。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用记录只有一项，这将大大节省内存。</p>
]]></content>
      
        <categories>
            
            <category> javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react-redux]]></title>
      <url>/2017/05/24/2017-05-24-react-redux/</url>
      <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016092101.jpg" alt="title"><br><a id="more"></a></p>
<h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>redux的三个概念: action reducer store</p>
<ul>
<li>action: 一个包含type的object, 通常把一个返回action对象的函数称为action函数, 直接简称为action</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        type: <span class="string">'Action1'</span>,</div><div class="line">        data,</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>reducer: 一个根据action type来更新数据的函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123; data: <span class="number">1</span> &#125;, action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action1'</span>: &#123;</div><div class="line">            <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</div><div class="line">            <span class="keyword">return</span> newState;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action2'</span>: &#123;</div><div class="line">             <span class="keyword">const</span> newState = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(state));</div><div class="line">             <span class="keyword">return</span> newState;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>store: 使用createStore从reducer函数创建的数据对象, 包含getState和dispatch方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> store = createStore(reducer);</div><div class="line"><span class="built_in">console</span>.log(store.getState())</div><div class="line"></div><div class="line">store.dispatch(action(<span class="number">0</span>))</div><div class="line"><span class="built_in">console</span>.log(store.getState())</div></pre></td></tr></table></figure>
<p><em>注意! 更新数据需要dispatch对应的action</em></p>
<h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>用于将redux于react结合</p>
<ul>
<li>Provider: 顶层组件, 注入store对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</div><div class="line"></div><div class="line">ReactDom.render(</div><div class="line">    &lt;Provider store=&#123;store&#125;&gt;</div><div class="line">        &lt;App /&gt;</div><div class="line">    &lt;<span class="regexp">/Provider&gt;,</span></div><div class="line"><span class="regexp">    document.getElementById('app'),</span></div><div class="line"><span class="regexp">);</span></div></pre></td></tr></table></figure>
<ul>
<li>connect: 工具函数, 参数一为函数, 该函数接收state, 返回一个对象, 对象包含一系列数据. 参数二为函数, 该函数接收dispatch, 返回一个对象, 对象包含一系列方法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;  </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">        <span class="keyword">this</span>.props.dispatch(&#123;</div><div class="line">            type: <span class="string">'action1'</span>,</div><div class="line">            data: <span class="number">1</span>,</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        <span class="comment">// this.props.func1();</span></div><div class="line">        <span class="comment">// this.props.func2();</span></div><div class="line">        <span class="keyword">return</span> (</div><div class="line">            &lt;div&gt;</div><div class="line">            &lt;<span class="regexp">/div &gt;</span></div><div class="line"><span class="regexp">        );</span></div><div class="line"><span class="regexp">    &#125;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">export default connect(</span></div><div class="line"><span class="regexp">    state =&gt; (&#123;</span></div><div class="line"><span class="regexp">        data: state.data,</span></div><div class="line"><span class="regexp">        obj: state.obj,</span></div><div class="line"><span class="regexp">    &#125;),</span></div><div class="line"><span class="regexp">    dispatch =&gt; (&#123; dispatch &#125;),</span></div><div class="line"><span class="regexp">)(App);</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="immutable-js"><a href="#immutable-js" class="headerlink" title="immutable.js"></a>immutable.js</h2><p>特殊的object(MAP)/array(LIST)</p>
<ul>
<li>更新数据: set setIn update updateIn</li>
<li>读取数据: get getIn</li>
<li>可以直接比较(深层比较)</li>
<li>创建(fromJS), 还原(toJS)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">上述的reducer可以用下面的代码优化</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = immutable.fromJS(&#123; data: <span class="number">1</span>, obj: &#123; aa: <span class="number">1</span> &#125; &#125;</span>), <span class="title">action</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (action.type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action1'</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state.set(<span class="string">'data'</span>, action.data * <span class="number">10</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">case</span> <span class="string">'action2'</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state.setIn([<span class="string">'obj'</span>, <span class="string">'aa'</span>], action.data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">default</span>: &#123;</div><div class="line">            <span class="keyword">return</span> state;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li>无需深复制, 更新数据自动返回一个新对象</li>
<li>适合与react shouldComponentUpdate结合来优化性能</li>
</ul>
<h2 id="pure-render-decorator"><a href="#pure-render-decorator" class="headerlink" title="pure-render-decorator"></a>pure-render-decorator</h2><p>自动创建shouldComponentUpdate的工具, 需要配置babel decorator特性才能使用</p>
]]></content>
      
        <categories>
            
            <category> react </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue全家桶+crawler+koa2 实现阴阳师小助手]]></title>
      <url>/2017/05/20/2017-5-20-vue%E5%85%A8%E5%AE%B6%E6%A1%B6-crawler-koa2-%E5%AE%9E%E7%8E%B0%E9%98%B4%E9%98%B3%E5%B8%88%E5%B0%8F%E5%8A%A9%E6%89%8B/</url>
      <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1502713315793&amp;di=f4c278533dc65215060e4dd216b01a20&amp;imgtype=0&amp;src=http%3A%2F%2Fupload.chinaz.com%2F2016%2F0928%2F6361065295044373028726125.png" alt="title"><br>最近一直在玩阴阳师，看了好多小助手，觉得太复杂了，还得登录什么的，想着自己写一个简单的小助手，只要输入要搜索的式神，我想知道的关于这个式神的数据就能显示出来。<br>只是第一版，前端用vue全家桶实现的，很适合刚开始接触vue的，后端用node实现的，如果有更好的建议或者想一起合作写个更好用点的，欢迎联系 <a href="https://github.com/funnycoderstar/yys-fe" target="_blank" rel="external">作者</a>。<br><a id="more"></a></p>
<h1 id="yys-fe-阴阳师小助手前端"><a href="#yys-fe-阴阳师小助手前端" class="headerlink" title="yys-fe(阴阳师小助手前端)"></a>yys-fe(阴阳师小助手前端)</h1><blockquote>
<p>A Vue.js project</p>
</blockquote>
<h3 id="github"><a href="#github" class="headerlink" title="github"></a><a href="https://github.com/funnycoderstar/yys-fe" target="_blank" rel="external">github</a></h3><h3 id="项目链接"><a href="#项目链接" class="headerlink" title="项目链接"></a><a href="http://yys.wangyaxing.top/#/" target="_blank" rel="external">项目链接</a></h3><p><img src="http://upload-images.jianshu.io/upload_images/3297464-bcc37825a913c8ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="阴阳师小助手后端实现"><a href="#阴阳师小助手后端实现" class="headerlink" title="阴阳师小助手后端实现"></a><a href="https://github.com/funnycoderstar/yys-be" target="_blank" rel="external">阴阳师小助手后端实现</a></h3><ul>
<li>nodejs + crawler + koa2 + mongoose</li>
</ul>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://upload-images.jianshu.io/upload_images/3297464-7c42da95d346c282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="search.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3297464-3e76f027626a4124.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="searchResult.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3297464-c776e7602061a23a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="heroList.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/3297464-c266c0669e263d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="heroTab.png"></p>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><pre><code>- 构建工具：webpack；
- 语言：Es6；
- 代码规范：eslint
- 应用：vue，
     vuex（数据管理架构），
     vue-router（路由），
     mint-ui（ul组件），
     vue-axios（vue做的ajax请求）
</code></pre><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">|-- [build]                          //构建服务和webpack配置</div><div class="line">|-- [config]                        //项目不同环境的配置</div><div class="line">|-- [dist]                            //文件服务器根目录  </div><div class="line">|-- [node_modules]          //项目依赖</div><div class="line">|-- [src]                             //源码</div><div class="line">|   |-- [assets]                    //资源文件</div><div class="line">|   |-- [components]           //项目模块文件夹</div><div class="line">|   |-- [store]                      //存储数据</div><div class="line">|   |       |-- index.js            //vuex store 定义</div><div class="line">|   |-- App.vue                   //主页面   </div><div class="line">|   |-- main.js                     //webpack预编译入口</div><div class="line">|   |-- [router]                     //全局路由定义</div><div class="line">|-- .babelrc                       //babel配置</div><div class="line">|-- .eslintrc.js                    //eslint rule 定义</div><div class="line">|-- index.html                    //项目入口文件</div><div class="line">|-- package.json               //项目配置文件</div><div class="line">|-- README.md               //关于启动项目的命令和含义</div></pre></td></tr></table></figure>
<h2 id="已经完成的模块"><a href="#已经完成的模块" class="headerlink" title="已经完成的模块"></a>已经完成的模块</h2><ul>
<li style="list-style: none"><input type="checkbox" checked> 式神搜索页面(支持模糊搜索)</li>
<li style="list-style: none"><input type="checkbox" checked> 式神搜索结果页面</li>
<li style="list-style: none"><input type="checkbox" checked> 式神列表页面</li>
<li style="list-style: none"><input type="checkbox" checked> 式神详细信息页面</li>
<li>[X] 推荐御魂</li>
<li>[X] 推荐搭配</li>
<li>[X] 式神点评</li>
</ul>
<h2 id="待完成与优化"><a href="#待完成与优化" class="headerlink" title="待完成与优化"></a>待完成与优化</h2><ul>
<li style="list-style: none"><input type="checkbox"> 搜索功能添加历史搜索和热门搜索</li>
<li style="list-style: none"><input type="checkbox"> 式神攻略</li>
<li style="list-style: none"><input type="checkbox"> 式神视频</li>
<li style="list-style: none"><input type="checkbox"> 页面样式的优化</li>
</ul>
<h2 id="Build-Setup"><a href="#Build-Setup" class="headerlink" title="Build Setup"></a>Build Setup</h2><p>``` bash</p>
<h1 id="install-dependencies"><a href="#install-dependencies" class="headerlink" title="install dependencies"></a>install dependencies</h1><p>npm install</p>
<h1 id="serve-with-hot-reload-at-localhost-8080"><a href="#serve-with-hot-reload-at-localhost-8080" class="headerlink" title="serve with hot reload at localhost:8080"></a>serve with hot reload at localhost:8080</h1><p>npm run dev</p>
<h1 id="build-for-production-with-minification"><a href="#build-for-production-with-minification" class="headerlink" title="build for production with minification"></a>build for production with minification</h1><p>npm run build</p>
<p>关于用vue时遇到的坑，记录在我的<a href="https://github.com/funnycoderstar/blog/issues?utf8=%E2%9C%93&amp;q=vue" target="_blank" rel="external">博客</a>,希望可以对大家有用<br>目前小编在学react，所以用<a href="https://github.com/funnycoderstar/yys_v2" target="_blank" rel="external">react也写了一版</a>,所以刚开始接触react的童鞋也可以看一下，想着第二版的ui设计的好看一点儿，功能再多一点儿，期待更多的建议。</p>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="https://github.com/funnycoderstar/blog" target="_blank" rel="external">blog</a></p>
]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法]]></title>
      <url>/2017/05/03/2017-05-03-%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<p><img src="http://www.runoob.com/wp-content/uploads/2015/09/1240" alt="title"><br>所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。<br><a id="more"></a></p>
<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><ul>
<li>冒泡算法</li>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li>
<li>针对所有的元素重复以上的步骤，除了最后一个。</li>
<li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;        <span class="comment">//相邻元素两两对比</span></div><div class="line">                <span class="keyword">var</span> temp = arr[j+<span class="number">1</span>];        <span class="comment">//元素交换</span></div><div class="line">                arr[j+<span class="number">1</span>] = arr[j];</div><div class="line">                arr[j] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bubbleSort([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">3</span>]));</div></pre></td></tr></table></figure>
</li>
<li><p>快速排序,通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> leftArr = [];</div><div class="line">    <span class="keyword">let</span> rightArr = [];</div><div class="line">    <span class="keyword">let</span> q = arr[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i&lt;arr.length;i++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &gt; q) &#123;</div><div class="line">            rightArr.push(arr[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            leftArr.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [].concat(quickSort(leftArr),[q],quickSort(rightArr));</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(quickSort([<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>,<span class="number">3</span>]));</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js经典面试题]]></title>
      <url>/2017/05/02/2017-05-02-js%E7%BB%8F%E5%85%B8%E7%AC%94%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2098593-15e01329776ddf2a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="title"><br>面试之前都会从网上找很多面试题来看,尤其是看到经典面试题,及必会的面试题,都是好好的看上几遍(其实更多的时候都是在背),可是总感觉面试之前看题作用并不大,因为你不理解的问题,还是会不理解,面试管随便一问,就不行了.其实面试几次后就会发现,经常问的问题也就那几个,比如,闭包,原型链,this,等.刚开始的时候真的是理解不了,然后就看书,强烈推荐<javascript高级程序设计(第三版)>以及&lt;你不知道的javascript系列&gt;,在实际项目中遇到坑的时候,就反复看,看的时候很难受,但是当真正理解了之后,就会恍然大悟,所以功夫还是下在平时,临时抱佛脚真的没啥用~<br><a id="more"></a></javascript高级程序设计(第三版)></p>
<h3 id="1-考察this"><a href="#1-考察this" class="headerlink" title="1,考察this"></a>1,考察this</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  length: <span class="number">5</span>,</div><div class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    fn();</div><div class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>]();</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.method(fn, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>10 ，2</li>
<li>第一次输出10应该没有问题。我们知道取对象属于除了点操作符还可以用中括号，所以第二次执行时相当于arguments调用方法，this指向arguments，而这里传了两个参数，故输出arguments长度为2。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> length = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.length);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  length: <span class="number">5</span>,</div><div class="line">  method: <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    fn();</div><div class="line">    <span class="keyword">const</span> fun = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">    fun()；</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">obj.method(fn, <span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>10 10<h3 id="2-var和函数的提前声明"><a href="#2-var和函数的提前声明" class="headerlink" title="2,var和函数的提前声明"></a>2,var和函数的提前声明</h3></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a); </div><div class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  <span class="built_in">console</span>.log(a); </div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<ul>
<li>function a() {} </li>
<li>2</li>
<li>var和function是会提前声明的.而且function是优先于var声明的(如果同时存在的话),所以刚开始输出的就是一个funciton,接着往下执行a进行重新赋值了,故第二次输出的是2；</li>
</ul>
<h3 id="3，局部变量和全局变量"><a href="#3，局部变量和全局变量" class="headerlink" title="3，局部变量和全局变量"></a>3，局部变量和全局变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;</div><div class="line"><span class="keyword">if</span> (f === <span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">  c = <span class="number">30</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn();</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"><span class="built_in">console</span>.log(b);</div><div class="line"><span class="built_in">console</span>.log(c);</div></pre></td></tr></table></figure>
<ul>
<li>输出 10 报错 30</li>
<li>这是个我犯了很久的错误，很长一段时间我都以为{…}内的新声明的变量是局部变量，后来我才发现function内的新声明的变量才是局部变量，而没有用var声明的变量在哪里都是全局变量。再次提醒切记只有function(){}内新声明的才能是局部变量，while{…}、if{…}、for(..) 之内的都是全局变量（除非本身包含在function内）。</li>
</ul>
<h3 id="4，变量隐式声明"><a href="#4，变量隐式声明" class="headerlink" title="4，变量隐式声明"></a>4，变量隐式声明</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>( <span class="string">'a'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</div><div class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<ul>
<li>10</li>
<li>funciton和var会提前声明,而其实{…}内的变量也会提前声明，于是代码还没执行前a已经被声明了。所以 ‘a’ in window会返回true,a被赋值</li>
</ul>
<h3 id="5，给基本类型数据添加属性，不报错，但取值时是undefined"><a href="#5，给基本类型数据添加属性，不报错，但取值时是undefined" class="headerlink" title="5，给基本类型数据添加属性，不报错，但取值时是undefined"></a>5，给基本类型数据添加属性，不报错，但取值时是undefined</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">a.pro = <span class="number">10</span>;</div><div class="line"><span class="built_in">console</span>.log(a.pro + a);</div><div class="line"></div><div class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</div><div class="line">s.pro = <span class="string">'world'</span>;</div><div class="line"><span class="built_in">console</span>.log(s.pro + s);</div></pre></td></tr></table></figure>
<ul>
<li>NaN undefinedhello</li>
<li>给基本类型数据加属性不报错，但是引用的话返回undefined,10+undefined返回NaN,而undefined和string相加时转变成了字符串</li>
</ul>
<h4 id="6，函数声明优先于变量声明"><a href="#6，函数声明优先于变量声明" class="headerlink" title="6，函数声明优先于变量声明"></a>6，函数声明优先于变量声明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> fn;</div></pre></td></tr></table></figure>
<ul>
<li>function</li>
<li>因为函数声明优于变量声明。我们知道在代码逐行执行前，函数声明和变量声明会提前进行，而函数声明又会优于变量声明，这里的优于可以理解为晚于变量声明后，如果函数名和变量名相同，函数声明就能覆盖变量声明。所以以上代码将函数声明和变量声明调换顺序还是一样结果。</li>
</ul>
<h4 id="7-判断一个字符串中出现次数最多的字符，并统计次数"><a href="#7-判断一个字符串中出现次数最多的字符，并统计次数" class="headerlink" title="7,判断一个字符串中出现次数最多的字符，并统计次数"></a>7,判断一个字符串中出现次数最多的字符，并统计次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> letter;</div><div class="line"><span class="keyword">var</span> maxn = <span class="number">-1</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; s.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(obj[s[i]]) &#123;</div><div class="line">            obj[s[i]] ++;</div><div class="line">            <span class="keyword">if</span>(obj[s[i]] &gt; maxn) &#123;</div><div class="line">                maxn = obj[s[i]];</div><div class="line">                letter = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            obj[s[i]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span>(obj[s[i]] &gt; maxn) &#123;</div><div class="line">                maxn = obj[s[i]];</div><div class="line">                letter = s[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;letter&#125;</span>:<span class="subst">$&#123;maxn&#125;</span>`</span>);</div></pre></td></tr></table></figure>
<ul>
<li>正则<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'aaabbbcccaaabbbaaa'</span>;</div><div class="line"><span class="keyword">var</span> a = s.split(<span class="string">''</span>);</div><div class="line">a.sort();</div><div class="line">s = a.join(<span class="string">''</span>);</div><div class="line"><span class="keyword">var</span> pattern = <span class="regexp">/(\w)\1*/g</span>;</div><div class="line"><span class="keyword">var</span> ans = s.match(pattern);</div><div class="line">ans.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.length &lt; b.length;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(ans[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">':'</span> + ans[<span class="number">0</span>].length);</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="8，-经典闭包"><a href="#8，-经典闭包" class="headerlink" title="8， 经典闭包"></a>8， <a href="https://juejin.im/post/58f558efac502e006c3e5c97" target="_blank" rel="external">经典闭包</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;!--html--&gt;</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;这是第<span class="number">1</span>个&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;这是第2个&lt;/</span>li&gt;</div><div class="line">    &lt;li&gt;这是第<span class="number">3</span>个&lt;<span class="regexp">/li&gt;</span></div><div class="line"><span class="regexp">    &lt;li&gt;这是第4个&lt;/</span>li&gt;</div><div class="line">&lt;<span class="regexp">/ul&gt;</span></div><div class="line"><span class="regexp"></span></div><div class="line"><span class="regexp">&lt;!--js--&gt;</span></div><div class="line"><span class="regexp">一：</span></div><div class="line"><span class="regexp">for(var i = 0; i &lt; lis.length; i++) &#123;</span></div><div class="line"><span class="regexp">    lis[i].index = i;</span></div><div class="line"><span class="regexp">    lis[i].onclick = function() &#123;</span></div><div class="line"><span class="regexp">      alert(this.index);</span></div><div class="line"><span class="regexp">    &#125;;</span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">二:</span></div><div class="line"><span class="regexp">for(var i = 0; i &lt; lis.length; i++) &#123;</span></div><div class="line"><span class="regexp">    (function(i) &#123;</span></div><div class="line"><span class="regexp">      lis[i].onclick = function() &#123;</span></div><div class="line"><span class="regexp">        alert(i);</span></div><div class="line"><span class="regexp">      &#125;;</span></div><div class="line"><span class="regexp">    &#125;)(i); </span></div><div class="line"><span class="regexp">&#125;</span></div><div class="line"><span class="regexp">三：</span></div><div class="line"><span class="regexp">for(let i = 0; i &lt; lis.length; i++) &#123;</span></div><div class="line"><span class="regexp">    lis[i].onclick = function() &#123;</span></div><div class="line"><span class="regexp">    alert(i);</span></div><div class="line"><span class="regexp">    &#125;;</span></div><div class="line"><span class="regexp">&#125;</span></div></pre></td></tr></table></figure>
<ul>
<li>从0开始隔10s按顺序出现’第一次出现’,’第二次出现’,’第三次出现‘<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> datas = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>];</div><div class="line"><span class="keyword">let</span> timer = <span class="literal">null</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123;</div><div class="line">    <span class="comment">//    const index = i;</span></div><div class="line">    <span class="keyword">if</span> (timer) &#123;</div><div class="line">        clearTimeout(timer);</div><div class="line">        <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(datas[i]);</div><div class="line">        &#125;, <span class="number">10000</span> * i)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(datas[i]);</div><div class="line">        &#125;, <span class="number">10000</span> * i)</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="9，请编写一个JavaScript函数-parseQueryString，它的用途是把URL参数解析为一个对象，如：-var-url-“http-witmax-cn-index-php-key0-0-amp-key1-1-amp-key2-2″"><a href="#9，请编写一个JavaScript函数-parseQueryString，它的用途是把URL参数解析为一个对象，如：-var-url-“http-witmax-cn-index-php-key0-0-amp-key1-1-amp-key2-2″" class="headerlink" title="9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″"></a>9，请编写一个JavaScript函数 parseQueryString，它的用途是把URL参数解析为一个对象，如： var url = “<a href="http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″" target="_blank" rel="external">http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2″</a></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> a = url.split(<span class="string">'?'</span>);</div><div class="line">  <span class="keyword">if</span>(a.length === <span class="number">1</span>) <span class="keyword">return</span> obj;</div><div class="line">  <span class="keyword">var</span> b = a[<span class="number">1</span>].split(<span class="string">'&amp;'</span>);</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, length = b.length; i &lt; length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> c = b[i].split(<span class="string">'='</span>);</div><div class="line">    obj[c[<span class="number">0</span>]] = c[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> url = <span class="string">'http://witmax.cn/index.php?key0=0&amp;key1=1&amp;key2=2'</span>;</div><div class="line"><span class="keyword">var</span> obj = parseQueryString(url);</div><div class="line"><span class="built_in">console</span>.log(obj.key0, obj.key1, obj.key2);  <span class="comment">// 0 1 2</span></div></pre></td></tr></table></figure>
<h4 id="10-this"><a href="#10-this" class="headerlink" title="10,this"></a>10,this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> baz=<span class="number">3</span>;</div><div class="line"><span class="keyword">var</span> bazz=&#123;</div><div class="line">   baz: <span class="number">2</span>,</div><div class="line">   getbaz: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.baz</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(bazz.getbaz())</div><div class="line"><span class="keyword">var</span> g=bazz.getbaz;</div><div class="line"><span class="built_in">console</span>.log(g());</div><div class="line">第一个输出<span class="number">2</span>，第二个输出<span class="number">3</span>,函数作为对象本身属性调用的时候<span class="keyword">this</span>指向对象，作为普通函数调用的时候就指向全局了</div></pre></td></tr></table></figure>
<h4 id="11，数组方法"><a href="#11，数组方法" class="headerlink" title="11，数组方法"></a>11，数组方法</h4><ul>
<li>数组排序:写一个js函数,将数组对象按照一定的顺序进行排序，且可通过参数决定升降序</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> list = [</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"first"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">1</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"second"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">2</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"third"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">3</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"name"</span>: <span class="string">"fourth"</span>,</div><div class="line">        <span class="string">"index"</span>: <span class="number">4</span>,</div><div class="line">    &#125;,</div><div class="line">]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">property</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> a[property] - a[property];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(list.sort(compare(<span class="string">'index'</span>)))</div></pre></td></tr></table></figure>
<h4 id="12-求一个字符串的字节长度"><a href="#12-求一个字符串的字节长度" class="headerlink" title="12,求一个字符串的字节长度"></a>12,求一个字符串的字节长度</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> len = str.length;</div><div class="line">        <span class="keyword">var</span> bytes = len;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</div><div class="line">str = <span class="string">'hello world'</span>;</div><div class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">0</span>)); <span class="comment">// 104, 返回指定索引处字符的 Unicode 数值,大于255为中文</span></div><div class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">0</span>)); <span class="comment">// h, 返回指定位置的字符,</span></div></pre></td></tr></table></figure>
<h4 id="13-jsonp原理及过程"><a href="#13-jsonp原理及过程" class="headerlink" title="13 jsonp原理及过程"></a>13 jsonp原理及过程</h4><ul>
<li>利用<script>标签没有跨域限制的“漏洞”（历史遗迹啊）来达到与第三方通讯的目的。</li>
<li>当需要通讯时，本站脚本创建一个<script>元素，地址指向第三方的API网址，形如 <script src="http://www.example.net/api?param1=1&param2=2"></script></li>
<li>并提供一个回调函数来接收数据（函数名可约定，或通过地址参数传递）。</li>
<li>第三方产生的响应为json数据的包装（故称之为jsonp，即json padding），形如：callback({“name”:”hax”,”gender”:”Male”})这样浏览器会调用callback函数，并传递解析后json对象作为参数。本站脚本可在callback函数里处理所传入的数据。</li>
</ul>
<h4 id="14-link和-import区别"><a href="#14-link和-import区别" class="headerlink" title="14, link和@import区别"></a>14, link和@import区别</h4><ul>
<li>link属于html标签，而@import是css提供的。</li>
<li>页面被加载时，link会同时被加载，而@import引用的css会等到页面加载结束后加载。</li>
<li>link是html标签，因此没有兼容性，而@import只有IE5以上才能识别。</li>
<li>link方式样式的权重高于@import的</li>
</ul>
<h4 id="15-参考"><a href="#15-参考" class="headerlink" title="15,参考"></a>15,参考</h4><p><a href="http://www.cnblogs.com/zichi/p/4359786.html" target="_blank" rel="external">这10道javaScript笔试题你都会么</a><br><a href="https://segmentfault.com/a/1190000007602848" target="_blank" rel="external">正则</a><br><a href="http://www.cnblogs.com/xxcanghai/p/5205998.html" target="_blank" rel="external">2016年十家公司面试小记</a><br><a href="http://www.alloyteam.com/2012/11/javascript-throttle/" target="_blank" rel="external">浅谈javascript的函数节流</a><br><a href="https://github.com/jayli/jayli.github.com/issues/19" target="_blank" rel="external">常见面试题1</a><br><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="external">常见面试题2</a><br><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="external">面试题3</a><br><a href="https://github.com/jawil/blog/issues/22" target="_blank" rel="external">html与css</a><br><a href="https://segmentfault.com/a/1190000010631325?_ea=2359607" target="_blank" rel="external">道阻且长啊TAT(前端面试总结),17年春招面试总结</a></p>
<h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p><a href="http://wangyaxing.deercv.com/" target="_blank" rel="external">aboutme</a><br><a href="https://github.com/funnycoderstar" target="_blank" rel="external">github</a><br><a href="http://wangyaxing.top/">blog</a></p>
]]></content>
      
        
        <tags>
            
            <tag> interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于斐波那契数列]]></title>
      <url>/2017/04/09/2017-04-09-%E5%85%B3%E4%BA%8E%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3463546863,3949490182&amp;fm=26&amp;gp=0.jpg" alt="title"></p>
<h1 id="用js实现斐波那契数列"><a href="#用js实现斐波那契数列" class="headerlink" title="用js实现斐波那契数列"></a>用js实现斐波那契数列</h1><p>首先介绍一下，斐波那契数列(Fibonacci sequence)又称黄金分割数列，斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=1，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用，<br><a id="more"></a></p>
<ul>
<li><p>斐波那契数列指的是这样一个数列 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233，377，610，987，1597，2584，4181，6765，10946，17711，28657，46368……..</p>
</li>
<li><p>这个数列从第3项开始，每一项都等于前两项之和。</p>
<h2 id="实现方法一"><a href="#实现方法一" class="headerlink" title="实现方法一"></a>实现方法一</h2></li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span>(n ===<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">以上的发法是能想到的最直观的实现，现在我们测试一下他的运行结果。</div><div class="line">fib(<span class="number">1</span>);</div><div class="line">fib(<span class="number">10</span>)</div><div class="line">fib(<span class="number">50</span>);</div><div class="line">运行发现n=<span class="number">1</span>时，会快速输出<span class="number">1</span>，n=<span class="number">10</span>,时，运行速度稍慢，但是当n=<span class="number">10</span>时，运行就非常慢，原因是什么呢，因为n=<span class="number">50</span>时，要进行差不多<span class="number">50</span>次的函数调用，每次调用，都会重新走<span class="keyword">if</span>的那三个判断条件，而且每次都是从最开始开始计算，当n越大时，性能越差，所以有没有更好的方法来实现它呢？</div></pre></td></tr></table></figure>
<h2 id="实现方法二"><a href="#实现方法二" class="headerlink" title="实现方法二"></a>实现方法二</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n === <span class="number">0</span>) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span>  <span class="keyword">if</span>(n ===<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">let</span> a = <span class="number">0</span>, b = <span class="number">1</span>;</div><div class="line">        <span class="keyword">let</span> current = <span class="literal">null</span>;</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">           current = b + a;</div><div class="line">           a = b;</div><div class="line">           b = current;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> current;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">方法二与方法一不同之处在于，最后一个判断加入了一个<span class="keyword">for</span>循环，current = b + a;当前享等于前两项的和，a = b;把前一项的值赋给a(第前两项)，b = current;把当前值赋给前b(第前一项)，这样当n&gt;<span class="number">1</span>时，只需要在第三个判断走一个循环可以，而不需要一直调用函数，这样做比方法一性能上优化了很多，但是还有没有更好的方法呢?</div></pre></td></tr></table></figure>
<h2 id="实现方法三"><a href="#实现方法三" class="headerlink" title="实现方法三"></a>实现方法三</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cache = &#123;</div><div class="line">    <span class="number">0</span>: <span class="number">0</span>,</div><div class="line">    <span class="number">1</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> cache[n] === <span class="string">'number'</span></div><div class="line">           ? cache[n]</div><div class="line">           : cache[n] = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line">该方法的实现利用了缓存，这样每次计算的时候，都会把计算出的值存放到cache这个缓存中，等下次传入较大的n时，如果缓存中有需要的值，则直接用缓存中的值，这种方法大大提高了函数的性能。</div><div class="line">还存在一个问题,fib(<span class="number">10000</span>) = <span class="literal">Infinity</span>;这有是为什么呢，</div><div class="line">我们可以从js中数值的取值范围考虑，如何知道js中数值的范围呢，</div><div class="line"> <span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_VALUE, <span class="built_in">Number</span>.MIN_VALUE); <span class="comment">//取得最大和最小的数</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER, <span class="built_in">Number</span>.MIN_SAFE_INTEGER);取得最大和最小的整数</div><div class="line"><span class="number">1.7976931348623157e+308</span> <span class="number">5e-324</span></div><div class="line"><span class="number">9007199254740991</span> <span class="number">-9007199254740991</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fib(<span class="number">400</span>));</div><div class="line"><span class="built_in">console</span>.log(fib(<span class="number">500</span>));</div><div class="line"><span class="number">1.760236806450138e+83</span></div><div class="line"><span class="number">1.394232245616977e+104</span></div><div class="line">n 在大于<span class="number">500</span>的时候差不多已超出范围</div></pre></td></tr></table></figure>
<p>如果有更好的方法，欢迎指正</p>
]]></content>
      
        <categories>
            
            <category> 算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
